
linear_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088b0  080088b0  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  080088b0  080088b0  000188b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088b8  080088b8  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088b8  080088b8  000188b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088bc  080088bc  000188bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  080088c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020218  2**0
                  CONTENTS
 10 .bss          00001d6c  20000218  20000218  00020218  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f84  20001f84  00020218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022d74  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000412c  00000000  00000000  00042fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  000470e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016c8  00000000  00000000  00048900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027bef  00000000  00000000  00049fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e71c  00000000  00000000  00071bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5250  00000000  00000000  000902d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00165523  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006694  00000000  00000000  00165578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000218 	.word	0x20000218
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008848 	.word	0x08008848

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000021c 	.word	0x2000021c
 80001c4:	08008848 	.word	0x08008848

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fe5c 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81a 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9f4 	bl	80008b8 <MX_GPIO_Init>
  MX_UART4_Init();
 80004d0:	f000 f91e 	bl	8000710 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f007 fc98 	bl	8007e08 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80004d8:	f000 f9c4 	bl	8000864 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87c 	bl	80005d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8a8 	bl	8000634 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f968 	bl	80007b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f992 	bl	8000810 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80004ec:	f000 f8da 	bl	80006a4 <MX_TIM7_Init>
  MX_UART5_Init();
 80004f0:	f000 f938 	bl	8000764 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  user_init();
 80004f4:	f000 fd2c 	bl	8000f50 <user_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  user_main();
 80004f8:	f000 fd78 	bl	8000fec <user_main>
 80004fc:	e7fc      	b.n	80004f8 <main+0x38>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 f992 	bl	8008838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <SystemClock_Config+0xd0>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <SystemClock_Config+0xd0>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <SystemClock_Config+0xd0>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <SystemClock_Config+0xd4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <SystemClock_Config+0xd4>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SystemClock_Config+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000570:	2319      	movs	r3, #25
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fcb2 	bl	8002ef0 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 fa23 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 ff13 	bl	80033e0 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 fa0c 	bl	80009dc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005c4:	f002 fff2 	bl	80035ac <HAL_RCC_EnableCSS>
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	; 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_I2C1_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_I2C1_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_I2C1_Init+0x50>)
 8000616:	f001 f9a3 	bl	8001960 <HAL_I2C_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f9dc 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000530 	.word	0x20000530
 800062c:	40005400 	.word	0x40005400
 8000630:	000186a0 	.word	0x000186a0

08000634 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_SPI1_Init+0x68>)
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <MX_SPI1_Init+0x6c>)
 800063c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_SPI1_Init+0x68>)
 8000640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_SPI1_Init+0x68>)
 8000648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_SPI1_Init+0x68>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_SPI1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_SPI1_Init+0x68>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_SPI1_Init+0x68>)
 8000662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000666:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_SPI1_Init+0x68>)
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_SPI1_Init+0x68>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_SPI1_Init+0x68>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_SPI1_Init+0x68>)
 800067c:	2200      	movs	r2, #0
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SPI1_Init+0x68>)
 8000682:	220a      	movs	r2, #10
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_SPI1_Init+0x68>)
 8000688:	f003 f8a1 	bl	80037ce <HAL_SPI_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000692:	f000 f9a3 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000060c 	.word	0x2000060c
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_TIM7_Init+0x64>)
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_TIM7_Init+0x68>)
 80006b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2099;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_TIM7_Init+0x64>)
 80006ba:	f640 0233 	movw	r2, #2099	; 0x833
 80006be:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_TIM7_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_TIM7_Init+0x64>)
 80006c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006cc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_TIM7_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_TIM7_Init+0x64>)
 80006d6:	f003 f903 	bl	80038e0 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80006e0:	f000 f97c 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM7_Init+0x64>)
 80006f2:	f003 fb15 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80006fc:	f000 f96e 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000234 	.word	0x20000234
 800070c:	40001400 	.word	0x40001400

08000710 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_UART4_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_UART4_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_UART4_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_UART4_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_UART4_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_UART4_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_UART4_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_UART4_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_UART4_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_UART4_Init+0x4c>)
 8000748:	f003 fb7a 	bl	8003e40 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f943 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200005c8 	.word	0x200005c8
 8000760:	40004c00 	.word	0x40004c00

08000764 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_UART5_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_UART5_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_UART5_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_UART5_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_UART5_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_UART5_Init+0x4c>)
 800079c:	f003 fb50 	bl	8003e40 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f919 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000584 	.word	0x20000584
 80007b4:	40005000 	.word	0x40005000

080007b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_USART1_UART_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007f4:	f003 fb24 	bl	8003e40 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 f8ed 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000027c 	.word	0x2000027c
 800080c:	40011000 	.word	0x40011000

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f003 fafa 	bl	8003e40 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f8c3 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000664 	.word	0x20000664
 8000860:	40004400 	.word	0x40004400

08000864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART3_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 800089c:	f003 fad0 	bl	8003e40 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f899 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200004ec 	.word	0x200004ec
 80008b4:	40004800 	.word	0x40004800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <MX_GPIO_Init+0x118>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3e      	ldr	r2, [pc, #248]	; (80009d0 <MX_GPIO_Init+0x118>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x118>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <MX_GPIO_Init+0x118>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <MX_GPIO_Init+0x118>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <MX_GPIO_Init+0x118>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_GPIO_Init+0x118>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a30      	ldr	r2, [pc, #192]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x118>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <MX_GPIO_Init+0x118>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_GPIO_Init+0x118>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x11c>)
 800097e:	f000 ffd5 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_GPIO_Init+0x120>)
 8000988:	f000 ffd0 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 800098c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <MX_GPIO_Init+0x11c>)
 80009a6:	f000 fe25 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0x120>)
 80009c2:	f000 fe17 	bl	80015f4 <HAL_GPIO_Init>

}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	; 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40020000 	.word	0x40020000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_I2C_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12c      	bne.n	8000ab4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <HAL_I2C_MspInit+0x8c>)
 8000a94:	f000 fdae 	bl	80015f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_SPI_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12b      	bne.n	8000b42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_SPI_MspInit+0x88>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_SPI_MspInit+0x88>)
 8000af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_SPI_MspInit+0x88>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_SPI_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_SPI_MspInit+0x88>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_SPI_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b22:	2318      	movs	r3, #24
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b32:	2305      	movs	r3, #5
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_SPI_MspInit+0x8c>)
 8000b3e:	f000 fd59 	bl	80015f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40013000 	.word	0x40013000
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_TIM_Base_MspInit+0x48>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d115      	bne.n	8000b96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2037      	movs	r0, #55	; 0x37
 8000b8c:	f000 fc69 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b90:	2037      	movs	r0, #55	; 0x37
 8000b92:	f000 fc82 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40001400 	.word	0x40001400
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b092      	sub	sp, #72	; 0x48
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4aa1      	ldr	r2, [pc, #644]	; (8000e4c <HAL_UART_MspInit+0x2a4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d135      	bne.n	8000c36 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8000bce:	4ba0      	ldr	r3, [pc, #640]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a9f      	ldr	r2, [pc, #636]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b9d      	ldr	r3, [pc, #628]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
 8000be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bea:	4b99      	ldr	r3, [pc, #612]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a98      	ldr	r2, [pc, #608]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b96      	ldr	r3, [pc, #600]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c14:	2308      	movs	r3, #8
 8000c16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	488d      	ldr	r0, [pc, #564]	; (8000e54 <HAL_UART_MspInit+0x2ac>)
 8000c20:	f000 fce8 	bl	80015f4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2034      	movs	r0, #52	; 0x34
 8000c2a:	f000 fc1a 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c2e:	2034      	movs	r0, #52	; 0x34
 8000c30:	f000 fc33 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c34:	e106      	b.n	8000e44 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==UART5)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a87      	ldr	r2, [pc, #540]	; (8000e58 <HAL_UART_MspInit+0x2b0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d14b      	bne.n	8000cd8 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c44:	4b82      	ldr	r3, [pc, #520]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a81      	ldr	r2, [pc, #516]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b7f      	ldr	r3, [pc, #508]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	4b7b      	ldr	r3, [pc, #492]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a7a      	ldr	r2, [pc, #488]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b78      	ldr	r3, [pc, #480]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
 8000c7c:	4b74      	ldr	r3, [pc, #464]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a73      	ldr	r2, [pc, #460]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b71      	ldr	r3, [pc, #452]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	623b      	str	r3, [r7, #32]
 8000c92:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4868      	ldr	r0, [pc, #416]	; (8000e54 <HAL_UART_MspInit+0x2ac>)
 8000cb2:	f000 fc9f 	bl	80015f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4862      	ldr	r0, [pc, #392]	; (8000e5c <HAL_UART_MspInit+0x2b4>)
 8000cd2:	f000 fc8f 	bl	80015f4 <HAL_GPIO_Init>
}
 8000cd6:	e0b5      	b.n	8000e44 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a60      	ldr	r2, [pc, #384]	; (8000e60 <HAL_UART_MspInit+0x2b8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12c      	bne.n	8000d3c <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a59      	ldr	r2, [pc, #356]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b50      	ldr	r3, [pc, #320]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1a:	23c0      	movs	r3, #192	; 0xc0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d32:	4619      	mov	r1, r3
 8000d34:	484b      	ldr	r0, [pc, #300]	; (8000e64 <HAL_UART_MspInit+0x2bc>)
 8000d36:	f000 fc5d 	bl	80015f4 <HAL_GPIO_Init>
}
 8000d3a:	e083      	b.n	8000e44 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <HAL_UART_MspInit+0x2c0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d144      	bne.n	8000dd0 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a39      	ldr	r2, [pc, #228]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d96:	4619      	mov	r1, r3
 8000d98:	4830      	ldr	r0, [pc, #192]	; (8000e5c <HAL_UART_MspInit+0x2b4>)
 8000d9a:	f000 fc2b 	bl	80015f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d9e:	2340      	movs	r3, #64	; 0x40
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000db6:	4619      	mov	r1, r3
 8000db8:	4828      	ldr	r0, [pc, #160]	; (8000e5c <HAL_UART_MspInit+0x2b4>)
 8000dba:	f000 fc1b 	bl	80015f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2026      	movs	r0, #38	; 0x26
 8000dc4:	f000 fb4d 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc8:	2026      	movs	r0, #38	; 0x26
 8000dca:	f000 fb66 	bl	800149a <HAL_NVIC_EnableIRQ>
}
 8000dce:	e039      	b.n	8000e44 <HAL_UART_MspInit+0x29c>
  else if(huart->Instance==USART3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <HAL_UART_MspInit+0x2c4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d134      	bne.n	8000e44 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_UART_MspInit+0x2a8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e24:	2307      	movs	r3, #7
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <HAL_UART_MspInit+0x2b4>)
 8000e30:	f000 fbe0 	bl	80015f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2027      	movs	r0, #39	; 0x27
 8000e3a:	f000 fb12 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e3e:	2027      	movs	r0, #39	; 0x27
 8000e40:	f000 fb2b 	bl	800149a <HAL_NVIC_EnableIRQ>
}
 8000e44:	bf00      	nop
 8000e46:	3748      	adds	r7, #72	; 0x48
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40004c00 	.word	0x40004c00
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40005000 	.word	0x40005000
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40004800 	.word	0x40004800

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000e74:	f002 fc90 	bl	8003798 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x8>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f9b0 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <USART2_IRQHandler+0x10>)
 8000ece:	f003 f939 	bl	8004144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000664 	.word	0x20000664

08000edc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <USART3_IRQHandler+0x10>)
 8000ee2:	f003 f92f 	bl	8004144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200004ec 	.word	0x200004ec

08000ef0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <UART4_IRQHandler+0x10>)
 8000ef6:	f003 f925 	bl	8004144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200005c8 	.word	0x200005c8

08000f04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <TIM7_IRQHandler+0x10>)
 8000f0a:	f002 fd38 	bl	800397e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000234 	.word	0x20000234

08000f18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <OTG_FS_IRQHandler+0x10>)
 8000f1e:	f000 ffb3 	bl	8001e88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20001b7c 	.word	0x20001b7c

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <user_init>:
uint8_t read_data[8] = {};

int16_t hour=0, min=0, sec=0, variation_flag=0, ms_100;
volatile bool tim7_EN = false; // volatile

void user_init(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	72fb      	strb	r3, [r7, #11]
	uint8_t *package;

	HAL_Delay(2000);
 8000f5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f5e:	f000 f981 	bl	8001264 <HAL_Delay>
	package = &init_cmd[0][0];
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <user_init+0x90>)
 8000f64:	607b      	str	r3, [r7, #4]
	for(int i=0;i<11;i++){
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b0a      	cmp	r3, #10
 8000f6e:	dc33      	bgt.n	8000fd8 <user_init+0x88>
		package = &init_cmd[0][0];
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <user_init+0x90>)
 8000f72:	607b      	str	r3, [r7, #4]
		ret = RS485_transmit(package+8*i, 8, 100);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2264      	movs	r2, #100	; 0x64
 8000f80:	2108      	movs	r1, #8
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f898 	bl	80010b8 <RS485_transmit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	72fb      	strb	r3, [r7, #11]

		HAL_Delay(20);
 8000f8c:	2014      	movs	r0, #20
 8000f8e:	f000 f969 	bl	8001264 <HAL_Delay>
		if(i==3){
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d11b      	bne.n	8000fd0 <user_init+0x80>
			do{
				package = &read_speed_cmd[0];
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <user_init+0x94>)
 8000f9a:	607b      	str	r3, [r7, #4]
				ret = RS485_transmit(package, 8, 100);
 8000f9c:	2264      	movs	r2, #100	; 0x64
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f889 	bl	80010b8 <RS485_transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	72fb      	strb	r3, [r7, #11]
				ret = RS485_receive(read_data, 8, 100);
 8000faa:	2264      	movs	r2, #100	; 0x64
 8000fac:	2108      	movs	r1, #8
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <user_init+0x98>)
 8000fb0:	f000 f862 	bl	8001078 <RS485_receive>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	72fb      	strb	r3, [r7, #11]

				HAL_Delay(20);
 8000fb8:	2014      	movs	r0, #20
 8000fba:	f000 f953 	bl	8001264 <HAL_Delay>
			}while(read_data[4] != 0 || read_data[3] != 0);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <user_init+0x98>)
 8000fc0:	791b      	ldrb	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1e8      	bne.n	8000f98 <user_init+0x48>
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <user_init+0x98>)
 8000fc8:	78db      	ldrb	r3, [r3, #3]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d000      	beq.n	8000fd0 <user_init+0x80>
			do{
 8000fce:	e7e3      	b.n	8000f98 <user_init+0x48>
	for(int i=0;i<11;i++){
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e7c8      	b.n	8000f6a <user_init+0x1a>

		}
	}
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	20000094 	.word	0x20000094
 8000fe8:	200002c0 	.word	0x200002c0

08000fec <user_main>:

void user_main(void){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	72fb      	strb	r3, [r7, #11]
	uint8_t *package;
	while(1){
		for(int i=0;i<5;i++){
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	dc2b      	bgt.n	8001058 <user_main+0x6c>
			package = &position_cmd[i][0];
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <user_main+0x80>)
 8001006:	4413      	add	r3, r2
 8001008:	607b      	str	r3, [r7, #4]
			ret = RS485_transmit(package, 8, 100);
 800100a:	2264      	movs	r2, #100	; 0x64
 800100c:	2108      	movs	r1, #8
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f852 	bl	80010b8 <RS485_transmit>
 8001014:	4603      	mov	r3, r0
 8001016:	72fb      	strb	r3, [r7, #11]
			HAL_Delay(20);
 8001018:	2014      	movs	r0, #20
 800101a:	f000 f923 	bl	8001264 <HAL_Delay>
			package = &move_cmd[0][0];
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <user_main+0x84>)
 8001020:	607b      	str	r3, [r7, #4]
			ret = RS485_transmit(package, 8, 100);
 8001022:	2264      	movs	r2, #100	; 0x64
 8001024:	2108      	movs	r1, #8
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f846 	bl	80010b8 <RS485_transmit>
 800102c:	4603      	mov	r3, r0
 800102e:	72fb      	strb	r3, [r7, #11]
			HAL_Delay(20);
 8001030:	2014      	movs	r0, #20
 8001032:	f000 f917 	bl	8001264 <HAL_Delay>
			ret = RS485_transmit(package+8, 8, 100);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3308      	adds	r3, #8
 800103a:	2264      	movs	r2, #100	; 0x64
 800103c:	2108      	movs	r1, #8
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f83a 	bl	80010b8 <RS485_transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	72fb      	strb	r3, [r7, #11]
			HAL_Delay(10000);
 8001048:	f242 7010 	movw	r0, #10000	; 0x2710
 800104c:	f000 f90a 	bl	8001264 <HAL_Delay>
		for(int i=0;i<5;i++){
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3301      	adds	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e7d0      	b.n	8000ffa <user_main+0xe>
		}
		if(tim7_EN){
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <user_main+0x88>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0c9      	beq.n	8000ff6 <user_main+0xa>

			tim7_EN = false;
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <user_main+0x88>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
		}
	}
 8001068:	e7c5      	b.n	8000ff6 <user_main+0xa>
 800106a:	bf00      	nop
 800106c:	2000005c 	.word	0x2000005c
 8001070:	20000084 	.word	0x20000084
 8001074:	200002c8 	.word	0x200002c8

08001078 <RS485_receive>:

}

static HAL_StatusTypeDef RS485_receive(uint8_t *pData, uint16_t size, uint32_t timeout){
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	460b      	mov	r3, r1
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef ret = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	75fb      	strb	r3, [r7, #23]
  HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2104      	movs	r1, #4
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <RS485_receive+0x38>)
 8001090:	f000 fc4c 	bl	800192c <HAL_GPIO_WritePin>
  ret = HAL_UART_Receive(&huart1, pData, size, timeout);
 8001094:	897a      	ldrh	r2, [r7, #10]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68f9      	ldr	r1, [r7, #12]
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <RS485_receive+0x3c>)
 800109c:	f002 ffaf 	bl	8003ffe <HAL_UART_Receive>
 80010a0:	4603      	mov	r3, r0
 80010a2:	75fb      	strb	r3, [r7, #23]
  return ret;
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	2000027c 	.word	0x2000027c

080010b8 <RS485_transmit>:

static HAL_StatusTypeDef RS485_transmit(uint8_t *pData, uint16_t size, uint32_t timeout){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	460b      	mov	r3, r1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef ret = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2104      	movs	r1, #4
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <RS485_transmit+0x40>)
 80010d0:	f000 fc2c 	bl	800192c <HAL_GPIO_WritePin>
	ret = HAL_UART_Transmit(&huart1, pData, size, timeout);
 80010d4:	897a      	ldrh	r2, [r7, #10]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68f9      	ldr	r1, [r7, #12]
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <RS485_transmit+0x44>)
 80010dc:	f002 fefd 	bl	8003eda <HAL_UART_Transmit>
 80010e0:	4603      	mov	r3, r0
 80010e2:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2104      	movs	r1, #4
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <RS485_transmit+0x40>)
 80010ea:	f000 fc1f 	bl	800192c <HAL_GPIO_WritePin>
	return ret;
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	2000027c 	.word	0x2000027c

08001100 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d102      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x16>
		tim7_EN = true;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	}
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000234 	.word	0x20000234
 8001128:	200002c8 	.word	0x200002c8

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001148:	4c0b      	ldr	r4, [pc, #44]	; (8001178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001156:	f7ff fee9 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f007 fb49 	bl	80087f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff f9af 	bl	80004c0 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001170:	080088c0 	.word	0x080088c0
  ldr r2, =_sbss
 8001174:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001178:	20001f84 	.word	0x20001f84

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f94f 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	200f      	movs	r0, #15
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fc18 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f967 	bl	80014b6 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f000 f92f 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	200000a0 	.word	0x200000a0
 8001220:	2000009c 	.word	0x2000009c

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200000a0 	.word	0x200000a0
 8001248:	200006a8 	.word	0x200006a8

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200006a8 	.word	0x200006a8

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffde 	bl	800124c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000a0 	.word	0x200000a0

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	; (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff29 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff3e 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff31 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff feb6 	bl	800124c <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e052      	b.n	80015a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0216 	bic.w	r2, r2, #22
 800150e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800151e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <HAL_DMA_Abort+0x62>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	e013      	b.n	800157a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001552:	f7ff fe7b 	bl	800124c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b05      	cmp	r3, #5
 800155e:	d90c      	bls.n	800157a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e015      	b.n	80015a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e4      	bne.n	8001552 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	223f      	movs	r2, #63	; 0x3f
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d004      	beq.n	80015cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e00c      	b.n	80015e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2205      	movs	r2, #5
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e16b      	b.n	80018e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 815a 	bne.w	80018e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d005      	beq.n	8001646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001642:	2b02      	cmp	r3, #2
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d017      	beq.n	80016e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d123      	bne.n	8001738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80b4 	beq.w	80018e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b60      	ldr	r3, [pc, #384]	; (8001900 <HAL_GPIO_Init+0x30c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <HAL_GPIO_Init+0x30c>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <HAL_GPIO_Init+0x30c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001796:	4a5b      	ldr	r2, [pc, #364]	; (8001904 <HAL_GPIO_Init+0x310>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_GPIO_Init+0x314>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d02b      	beq.n	800181a <HAL_GPIO_Init+0x226>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a51      	ldr	r2, [pc, #324]	; (800190c <HAL_GPIO_Init+0x318>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d025      	beq.n	8001816 <HAL_GPIO_Init+0x222>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_GPIO_Init+0x31c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01f      	beq.n	8001812 <HAL_GPIO_Init+0x21e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4f      	ldr	r2, [pc, #316]	; (8001914 <HAL_GPIO_Init+0x320>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d019      	beq.n	800180e <HAL_GPIO_Init+0x21a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4e      	ldr	r2, [pc, #312]	; (8001918 <HAL_GPIO_Init+0x324>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0x216>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4d      	ldr	r2, [pc, #308]	; (800191c <HAL_GPIO_Init+0x328>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00d      	beq.n	8001806 <HAL_GPIO_Init+0x212>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_GPIO_Init+0x32c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x20e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <HAL_GPIO_Init+0x330>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_GPIO_Init+0x20a>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e00e      	b.n	800181c <HAL_GPIO_Init+0x228>
 80017fe:	2308      	movs	r3, #8
 8001800:	e00c      	b.n	800181c <HAL_GPIO_Init+0x228>
 8001802:	2306      	movs	r3, #6
 8001804:	e00a      	b.n	800181c <HAL_GPIO_Init+0x228>
 8001806:	2305      	movs	r3, #5
 8001808:	e008      	b.n	800181c <HAL_GPIO_Init+0x228>
 800180a:	2304      	movs	r3, #4
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x228>
 800180e:	2303      	movs	r3, #3
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x228>
 8001812:	2302      	movs	r3, #2
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x228>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x228>
 800181a:	2300      	movs	r3, #0
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f002 0203 	and.w	r2, r2, #3
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4093      	lsls	r3, r2
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182c:	4935      	ldr	r1, [pc, #212]	; (8001904 <HAL_GPIO_Init+0x310>)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_GPIO_Init+0x334>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800185e:	4a32      	ldr	r2, [pc, #200]	; (8001928 <HAL_GPIO_Init+0x334>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001864:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_GPIO_Init+0x334>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_GPIO_Init+0x334>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_GPIO_Init+0x334>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_GPIO_Init+0x334>)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_GPIO_Init+0x334>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <HAL_GPIO_Init+0x334>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b0f      	cmp	r3, #15
 80018ec:	f67f ae90 	bls.w	8001610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40013800 	.word	0x40013800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	40020800 	.word	0x40020800
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40021400 	.word	0x40021400
 8001920:	40021800 	.word	0x40021800
 8001924:	40021c00 	.word	0x40021c00
 8001928:	40013c00 	.word	0x40013c00

0800192c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001948:	e003      	b.n	8001952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	619a      	str	r2, [r3, #24]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e12b      	b.n	8001bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff f856 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2224      	movs	r2, #36	; 0x24
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019c4:	f001 fec0 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 80019c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a81      	ldr	r2, [pc, #516]	; (8001bd4 <HAL_I2C_Init+0x274>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d807      	bhi.n	80019e4 <HAL_I2C_Init+0x84>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a80      	ldr	r2, [pc, #512]	; (8001bd8 <HAL_I2C_Init+0x278>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	bf94      	ite	ls
 80019dc:	2301      	movls	r3, #1
 80019de:	2300      	movhi	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e006      	b.n	80019f2 <HAL_I2C_Init+0x92>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a7d      	ldr	r2, [pc, #500]	; (8001bdc <HAL_I2C_Init+0x27c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	bf94      	ite	ls
 80019ec:	2301      	movls	r3, #1
 80019ee:	2300      	movhi	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0e7      	b.n	8001bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4a78      	ldr	r2, [pc, #480]	; (8001be0 <HAL_I2C_Init+0x280>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a6a      	ldr	r2, [pc, #424]	; (8001bd4 <HAL_I2C_Init+0x274>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d802      	bhi.n	8001a34 <HAL_I2C_Init+0xd4>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	e009      	b.n	8001a48 <HAL_I2C_Init+0xe8>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	4a69      	ldr	r2, [pc, #420]	; (8001be4 <HAL_I2C_Init+0x284>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	3301      	adds	r3, #1
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	495c      	ldr	r1, [pc, #368]	; (8001bd4 <HAL_I2C_Init+0x274>)
 8001a64:	428b      	cmp	r3, r1
 8001a66:	d819      	bhi.n	8001a9c <HAL_I2C_Init+0x13c>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1e59      	subs	r1, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a76:	1c59      	adds	r1, r3, #1
 8001a78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <HAL_I2C_Init+0x138>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1e59      	subs	r1, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a96:	e051      	b.n	8001b3c <HAL_I2C_Init+0x1dc>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e04f      	b.n	8001b3c <HAL_I2C_Init+0x1dc>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d111      	bne.n	8001ac8 <HAL_I2C_Init+0x168>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	440b      	add	r3, r1
 8001ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e012      	b.n	8001aee <HAL_I2C_Init+0x18e>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e58      	subs	r0, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	0099      	lsls	r1, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Init+0x196>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e022      	b.n	8001b3c <HAL_I2C_Init+0x1dc>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10e      	bne.n	8001b1c <HAL_I2C_Init+0x1bc>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1e58      	subs	r0, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	440b      	add	r3, r1
 8001b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1a:	e00f      	b.n	8001b3c <HAL_I2C_Init+0x1dc>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	0099      	lsls	r1, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	6809      	ldr	r1, [r1, #0]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6911      	ldr	r1, [r2, #16]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68d2      	ldr	r2, [r2, #12]
 8001b76:	4311      	orrs	r1, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	000186a0 	.word	0x000186a0
 8001bd8:	001e847f 	.word	0x001e847f
 8001bdc:	003d08ff 	.word	0x003d08ff
 8001be0:	431bde83 	.word	0x431bde83
 8001be4:	10624dd3 	.word	0x10624dd3

08001be8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bea:	b08f      	sub	sp, #60	; 0x3c
 8001bec:	af0a      	add	r7, sp, #40	; 0x28
 8001bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e10f      	b.n	8001e1a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f006 fad7 	bl	80081c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fa20 	bl	800507e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	687e      	ldr	r6, [r7, #4]
 8001c46:	466d      	mov	r5, sp
 8001c48:	f106 0410 	add.w	r4, r6, #16
 8001c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c5c:	1d33      	adds	r3, r6, #4
 8001c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c60:	6838      	ldr	r0, [r7, #0]
 8001c62:	f003 f8f7 	bl	8004e54 <USB_CoreInit>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0d0      	b.n	8001e1a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fa0e 	bl	80050a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e04a      	b.n	8001d20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	333d      	adds	r3, #61	; 0x3d
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	333c      	adds	r3, #60	; 0x3c
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	b298      	uxth	r0, r3
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3342      	adds	r3, #66	; 0x42
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	333f      	adds	r3, #63	; 0x3f
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	3344      	adds	r3, #68	; 0x44
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3348      	adds	r3, #72	; 0x48
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	3350      	adds	r3, #80	; 0x50
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3af      	bcc.n	8001c8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e044      	b.n	8001dba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d3b5      	bcc.n	8001d30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	687e      	ldr	r6, [r7, #4]
 8001dcc:	466d      	mov	r5, sp
 8001dce:	f106 0410 	add.w	r4, r6, #16
 8001dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de2:	1d33      	adds	r3, r6, #4
 8001de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001de6:	6838      	ldr	r0, [r7, #0]
 8001de8:	f003 f9a6 	bl	8005138 <USB_DevInit>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00d      	b.n	8001e1a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f004 fa22 	bl	800625c <USB_DevDisconnect>

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_PCD_Start+0x1c>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e020      	b.n	8001e80 <HAL_PCD_Start+0x5e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d109      	bne.n	8001e62 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d005      	beq.n	8001e62 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 f8f8 	bl	800505c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 f9d2 	bl	800621a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b08d      	sub	sp, #52	; 0x34
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fa90 	bl	80063c4 <USB_GetMode>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 839d 	bne.w	80025e6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 f9f4 	bl	800629e <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8393 	beq.w	80025e4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 f9eb 	bl	800629e <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d107      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f002 0202 	and.w	r2, r2, #2
 8001ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 f9d9 	bl	800629e <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d161      	bne.n	8001fba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0210 	bic.w	r2, r2, #16
 8001f04:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f003 020f 	and.w	r2, r3, #15
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	3304      	adds	r3, #4
 8001f24:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	0c5b      	lsrs	r3, r3, #17
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d124      	bne.n	8001f7c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d035      	beq.n	8001faa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6a38      	ldr	r0, [r7, #32]
 8001f52:	f004 f810 	bl	8005f76 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f62:	441a      	add	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f74:	441a      	add	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	619a      	str	r2, [r3, #24]
 8001f7a:	e016      	b.n	8001faa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	0c5b      	lsrs	r3, r3, #17
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d110      	bne.n	8001faa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4619      	mov	r1, r3
 8001f92:	6a38      	ldr	r0, [r7, #32]
 8001f94:	f003 ffef 	bl	8005f76 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fa4:	441a      	add	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0210 	orr.w	r2, r2, #16
 8001fb8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 f96d 	bl	800629e <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fce:	d16e      	bne.n	80020ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 f973 	bl	80062c4 <USB_ReadDevAllOutEpInterrupt>
 8001fde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fe0:	e062      	b.n	80020a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d057      	beq.n	800209c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 f998 	bl	800632c <USB_ReadDevOutEPInterrupt>
 8001ffc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00c      	beq.n	8002022 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002014:	461a      	mov	r2, r3
 8002016:	2301      	movs	r3, #1
 8002018:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800201a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fdb1 	bl	8002b84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00c      	beq.n	8002046 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002038:	461a      	mov	r2, r3
 800203a:	2308      	movs	r3, #8
 800203c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800203e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 feab 	bl	8002d9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4413      	add	r3, r2
 8002058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205c:	461a      	mov	r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	4413      	add	r3, r2
 8002074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002078:	461a      	mov	r2, r3
 800207a:	2320      	movs	r3, #32
 800207c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4413      	add	r3, r2
 8002090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002094:	461a      	mov	r2, r3
 8002096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	3301      	adds	r3, #1
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	085b      	lsrs	r3, r3, #1
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d199      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f004 f8f3 	bl	800629e <USB_ReadInterrupts>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020c2:	f040 80c0 	bne.w	8002246 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 f914 	bl	80062f8 <USB_ReadDevAllInEpInterrupt>
 80020d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020d6:	e0b2      	b.n	800223e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80a7 	beq.w	8002232 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 f93a 	bl	8006368 <USB_ReadDevInEPInterrupt>
 80020f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d057      	beq.n	80021b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	2201      	movs	r2, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	69f9      	ldr	r1, [r7, #28]
 800211c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002120:	4013      	ands	r3, r2
 8002122:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002130:	461a      	mov	r2, r3
 8002132:	2301      	movs	r3, #1
 8002134:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d132      	bne.n	80021a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3348      	adds	r3, #72	; 0x48
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4403      	add	r3, r0
 800215e:	3344      	adds	r3, #68	; 0x44
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4419      	add	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4403      	add	r3, r0
 8002172:	3348      	adds	r3, #72	; 0x48
 8002174:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	2b00      	cmp	r3, #0
 800217a:	d113      	bne.n	80021a4 <HAL_PCD_IRQHandler+0x31c>
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3350      	adds	r3, #80	; 0x50
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d108      	bne.n	80021a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800219c:	461a      	mov	r2, r3
 800219e:	2101      	movs	r1, #1
 80021a0:	f004 f942 	bl	8006428 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f006 f88d 	bl	80082ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c6:	461a      	mov	r2, r3
 80021c8:	2308      	movs	r3, #8
 80021ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e2:	461a      	mov	r2, r3
 80021e4:	2310      	movs	r3, #16
 80021e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fe:	461a      	mov	r2, r3
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221a:	461a      	mov	r2, r3
 800221c:	2302      	movs	r3, #2
 800221e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800222a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fc1b 	bl	8002a68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	f47f af49 	bne.w	80020d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f004 f827 	bl	800629e <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800225a:	d122      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002282:	2100      	movs	r1, #0
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fe27 	bl	8002ed8 <HAL_PCDEx_LPM_Callback>
 800228a:	e002      	b.n	8002292 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f006 f893 	bl	80083b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fff9 	bl	800629e <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022b6:	d112      	bne.n	80022de <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d102      	bne.n	80022ce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f006 f84f 	bl	800836c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022dc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 ffdb 	bl	800629e <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f2:	f040 80c7 	bne.w	8002484 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2110      	movs	r1, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f003 f875 	bl	8005400 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800231a:	e056      	b.n	80023ca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002328:	461a      	mov	r2, r3
 800232a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800232e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002340:	0151      	lsls	r1, r2, #5
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	440a      	add	r2, r1
 8002346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800234a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800234e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002360:	0151      	lsls	r1, r2, #5
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	440a      	add	r2, r1
 8002366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800236a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800236e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237c:	461a      	mov	r2, r3
 800237e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002382:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002394:	0151      	lsls	r1, r2, #5
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	440a      	add	r2, r1
 800239a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800239e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b4:	0151      	lsls	r1, r2, #5
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	440a      	add	r2, r1
 80023ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	3301      	adds	r3, #1
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3a3      	bcc.n	800231c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002400:	f043 030b 	orr.w	r3, r3, #11
 8002404:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002416:	f043 030b 	orr.w	r3, r3, #11
 800241a:	6453      	str	r3, [r2, #68]	; 0x44
 800241c:	e015      	b.n	800244a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002430:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002434:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002444:	f043 030b 	orr.w	r3, r3, #11
 8002448:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002458:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800245c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800246e:	461a      	mov	r2, r3
 8002470:	f003 ffda 	bl	8006428 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 ff08 	bl	800629e <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002498:	d124      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 ff9e 	bl	80063e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 f806 	bl	80054ba <USB_GetDevSpeed>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681c      	ldr	r4, [r3, #0]
 80024ba:	f001 f939 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 80024be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	4620      	mov	r0, r4
 80024ca:	f002 fd25 	bl	8004f18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f005 ff23 	bl	800831a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 fed8 	bl	800629e <USB_ReadInterrupts>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d10a      	bne.n	800250e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f005 ff00 	bl	80082fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 0208 	and.w	r2, r2, #8
 800250c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fec3 	bl	800629e <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002522:	d10f      	bne.n	8002544 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f005 ff62 	bl	80083f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f003 fea8 	bl	800629e <USB_ReadInterrupts>
 800254e:	4603      	mov	r3, r0
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002558:	d10f      	bne.n	800257a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f005 ff35 	bl	80083d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fe8d 	bl	800629e <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d10a      	bne.n	80025a6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f005 ff43 	bl	800841c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fe77 	bl	800629e <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d115      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f005 ff33 	bl	8008438 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	e000      	b.n	80025e6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80025e4:	bf00      	nop
    }
  }
}
 80025e6:	3734      	adds	r7, #52	; 0x34
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd90      	pop	{r4, r7, pc}

080025ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_PCD_SetAddress+0x1a>
 8002602:	2302      	movs	r3, #2
 8002604:	e013      	b.n	800262e <HAL_PCD_SetAddress+0x42>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fdd5 	bl	80061ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	4608      	mov	r0, r1
 8002640:	4611      	mov	r1, r2
 8002642:	461a      	mov	r2, r3
 8002644:	4603      	mov	r3, r0
 8002646:	70fb      	strb	r3, [r7, #3]
 8002648:	460b      	mov	r3, r1
 800264a:	803b      	strh	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002658:	2b00      	cmp	r3, #0
 800265a:	da0f      	bge.n	800267c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	f003 020f 	and.w	r2, r3, #15
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	3338      	adds	r3, #56	; 0x38
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	3304      	adds	r3, #4
 8002672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	705a      	strb	r2, [r3, #1]
 800267a:	e00f      	b.n	800269c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026a8:	883a      	ldrh	r2, [r7, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	78ba      	ldrb	r2, [r7, #2]
 80026b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026c6:	78bb      	ldrb	r3, [r7, #2]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d102      	bne.n	80026d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_PCD_EP_Open+0xaa>
 80026dc:	2302      	movs	r3, #2
 80026de:	e00e      	b.n	80026fe <HAL_PCD_EP_Open+0xc8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68f9      	ldr	r1, [r7, #12]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 ff08 	bl	8005504 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80026fc:	7afb      	ldrb	r3, [r7, #11]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002716:	2b00      	cmp	r3, #0
 8002718:	da0f      	bge.n	800273a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	f003 020f 	and.w	r2, r3, #15
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	3338      	adds	r3, #56	; 0x38
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	705a      	strb	r2, [r3, #1]
 8002738:	e00f      	b.n	800275a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	f003 020f 	and.w	r2, r3, #15
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4413      	add	r3, r2
 8002750:	3304      	adds	r3, #4
 8002752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_PCD_EP_Close+0x6e>
 8002770:	2302      	movs	r3, #2
 8002772:	e00e      	b.n	8002792 <HAL_PCD_EP_Close+0x8c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68f9      	ldr	r1, [r7, #12]
 8002782:	4618      	mov	r0, r3
 8002784:	f002 ff46 	bl	8005614 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	460b      	mov	r3, r1
 80027a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	f003 020f 	and.w	r2, r3, #15
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2200      	movs	r2, #0
 80027d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2200      	movs	r2, #0
 80027da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	6979      	ldr	r1, [r7, #20]
 800280e:	f003 fa21 	bl	8005c54 <USB_EP0StartXfer>
 8002812:	e008      	b.n	8002826 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6979      	ldr	r1, [r7, #20]
 8002822:	f002 ffd3 	bl	80057cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	460b      	mov	r3, r1
 800286e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	3338      	adds	r3, #56	; 0x38
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2201      	movs	r2, #1
 800289e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d102      	bne.n	80028ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6979      	ldr	r1, [r7, #20]
 80028d2:	f003 f9bf 	bl	8005c54 <USB_EP0StartXfer>
 80028d6:	e008      	b.n	80028ea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	6979      	ldr	r1, [r7, #20]
 80028e6:	f002 ff71 	bl	80057cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 020f 	and.w	r2, r3, #15
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d901      	bls.n	8002912 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e050      	b.n	80029b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da0f      	bge.n	800293a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	f003 020f 	and.w	r2, r3, #15
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	3338      	adds	r3, #56	; 0x38
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	705a      	strb	r2, [r3, #1]
 8002938:	e00d      	b.n	8002956 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	3304      	adds	r3, #4
 800294e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_PCD_EP_SetStall+0x82>
 8002972:	2302      	movs	r3, #2
 8002974:	e01e      	b.n	80029b4 <HAL_PCD_EP_SetStall+0xc0>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fb4e 	bl	8006026 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	b2d9      	uxtb	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029a4:	461a      	mov	r2, r3
 80029a6:	f003 fd3f 	bl	8006428 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 020f 	and.w	r2, r3, #15
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d901      	bls.n	80029da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e042      	b.n	8002a60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da0f      	bge.n	8002a02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	3338      	adds	r3, #56	; 0x38
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	3304      	adds	r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	705a      	strb	r2, [r3, #1]
 8002a00:	e00f      	b.n	8002a22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 020f 	and.w	r2, r3, #15
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4413      	add	r3, r2
 8002a18:	3304      	adds	r3, #4
 8002a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_PCD_EP_ClrStall+0x86>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e00e      	b.n	8002a60 <HAL_PCD_EP_ClrStall+0xa4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 fb56 	bl	8006102 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	3338      	adds	r3, #56	; 0x38
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d901      	bls.n	8002aa0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e06c      	b.n	8002b7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d902      	bls.n	8002abc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3303      	adds	r3, #3
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ac4:	e02b      	b.n	8002b1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d902      	bls.n	8002ae2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3303      	adds	r3, #3
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	68d9      	ldr	r1, [r3, #12]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4603      	mov	r3, r0
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f003 f9fa 	bl	8005efa <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	441a      	add	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	441a      	add	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d809      	bhi.n	8002b48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d203      	bcs.n	8002b48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1be      	bne.n	8002ac6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d811      	bhi.n	8002b78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	6939      	ldr	r1, [r7, #16]
 8002b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b74:	4013      	ands	r3, r2
 8002b76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	333c      	adds	r3, #60	; 0x3c
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	f040 80a0 	bne.w	8002cfc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d015      	beq.n	8002bf2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a72      	ldr	r2, [pc, #456]	; (8002d94 <PCD_EP_OutXfrComplete_int+0x210>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	f240 80dd 	bls.w	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80d7 	beq.w	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be8:	461a      	mov	r2, r3
 8002bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bee:	6093      	str	r3, [r2, #8]
 8002bf0:	e0cb      	b.n	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	6093      	str	r3, [r2, #8]
 8002c0e:	e0bc      	b.n	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 80b7 	bne.w	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a5d      	ldr	r2, [pc, #372]	; (8002d94 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d90f      	bls.n	8002c44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c40:	6093      	str	r3, [r2, #8]
 8002c42:	e0a2      	b.n	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	440b      	add	r3, r1
 8002c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002c6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4403      	add	r3, r0
 8002c7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4403      	add	r3, r0
 8002ca2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4419      	add	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4403      	add	r3, r0
 8002cb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cbc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d114      	bne.n	8002cee <PCD_EP_OutXfrComplete_int+0x16a>
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d108      	bne.n	8002cee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2101      	movs	r1, #1
 8002cea:	f003 fb9d 	bl	8006428 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f005 facd 	bl	8008294 <HAL_PCD_DataOutStageCallback>
 8002cfa:	e046      	b.n	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <PCD_EP_OutXfrComplete_int+0x214>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d124      	bne.n	8002d4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d20:	6093      	str	r3, [r2, #8]
 8002d22:	e032      	b.n	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f005 faa4 	bl	8008294 <HAL_PCD_DataOutStageCallback>
 8002d4c:	e01d      	b.n	8002d8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d114      	bne.n	8002d7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d76:	461a      	mov	r2, r3
 8002d78:	2100      	movs	r1, #0
 8002d7a:	f003 fb55 	bl	8006428 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f005 fa85 	bl	8008294 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	4f54300a 	.word	0x4f54300a
 8002d98:	4f54310a 	.word	0x4f54310a

08002d9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	333c      	adds	r3, #60	; 0x3c
 8002db4:	3304      	adds	r3, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d90e      	bls.n	8002df0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f005 fa3d 	bl	8008270 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d90c      	bls.n	8002e18 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e10:	461a      	mov	r2, r3
 8002e12:	2101      	movs	r1, #1
 8002e14:	f003 fb08 	bl	8006428 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	4f54300a 	.word	0x4f54300a

08002e28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
 8002e34:	4613      	mov	r3, r2
 8002e36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d107      	bne.n	8002e56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e46:	883b      	ldrh	r3, [r7, #0]
 8002e48:	0419      	lsls	r1, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	e028      	b.n	8002ea8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e00d      	b.n	8002e86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	3340      	adds	r3, #64	; 0x40
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	3301      	adds	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d3ec      	bcc.n	8002e6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e90:	883b      	ldrh	r3, [r7, #0]
 8002e92:	0418      	lsls	r0, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4302      	orrs	r2, r0
 8002ea0:	3340      	adds	r3, #64	; 0x40
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e264      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d075      	beq.n	8002ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0e:	4ba3      	ldr	r3, [pc, #652]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4ba0      	ldr	r3, [pc, #640]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b9d      	ldr	r3, [pc, #628]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	4b99      	ldr	r3, [pc, #612]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x108>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d157      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e23f      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCC_OscConfig+0x74>
 8002f56:	4b91      	ldr	r3, [pc, #580]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a90      	ldr	r2, [pc, #576]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b8b      	ldr	r3, [pc, #556]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a8a      	ldr	r2, [pc, #552]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b88      	ldr	r3, [pc, #544]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a87      	ldr	r2, [pc, #540]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f88:	4b84      	ldr	r3, [pc, #528]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a83      	ldr	r2, [pc, #524]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b81      	ldr	r3, [pc, #516]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a80      	ldr	r2, [pc, #512]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe f950 	bl	800124c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe f94c 	bl	800124c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e204      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b76      	ldr	r3, [pc, #472]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xc0>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f93c 	bl	800124c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe f938 	bl	800124c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1f0      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b6c      	ldr	r3, [pc, #432]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xe8>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003006:	4b65      	ldr	r3, [pc, #404]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b62      	ldr	r3, [pc, #392]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b5c      	ldr	r3, [pc, #368]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1c4      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b56      	ldr	r3, [pc, #344]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4952      	ldr	r1, [pc, #328]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <HAL_RCC_OscConfig+0x2b0>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe f8f1 	bl	800124c <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306e:	f7fe f8ed 	bl	800124c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1a5      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b46      	ldr	r3, [pc, #280]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4940      	ldr	r1, [pc, #256]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_RCC_OscConfig+0x2b0>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe f8d0 	bl	800124c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fe f8cc 	bl	800124c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e184      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d030      	beq.n	800313c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <HAL_RCC_OscConfig+0x2b4>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe f8b0 	bl	800124c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f0:	f7fe f8ac 	bl	800124c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e164      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x200>
 800310e:	e015      	b.n	800313c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCC_OscConfig+0x2b4>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7fe f899 	bl	800124c <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311e:	f7fe f895 	bl	800124c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e14d      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a0 	beq.w	800328a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b0f      	ldr	r3, [pc, #60]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a0e      	ldr	r2, [pc, #56]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b0c      	ldr	r3, [pc, #48]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x2b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d121      	bne.n	80031ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x2b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_RCC_OscConfig+0x2b8>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe f85b 	bl	800124c <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e011      	b.n	80031be <HAL_RCC_OscConfig+0x2ce>
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	42470000 	.word	0x42470000
 80031a4:	42470e80 	.word	0x42470e80
 80031a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f7fe f84e 	bl	800124c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e106      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <HAL_RCC_OscConfig+0x4e4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d106      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
 80031d2:	4b81      	ldr	r3, [pc, #516]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a80      	ldr	r2, [pc, #512]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
 80031de:	e01c      	b.n	800321a <HAL_RCC_OscConfig+0x32a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d10c      	bne.n	8003202 <HAL_RCC_OscConfig+0x312>
 80031e8:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a7a      	ldr	r2, [pc, #488]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 80031ee:	f043 0304 	orr.w	r3, r3, #4
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
 80031f4:	4b78      	ldr	r3, [pc, #480]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a77      	ldr	r2, [pc, #476]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003200:	e00b      	b.n	800321a <HAL_RCC_OscConfig+0x32a>
 8003202:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a74      	ldr	r2, [pc, #464]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	4a71      	ldr	r2, [pc, #452]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d015      	beq.n	800324e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe f813 	bl	800124c <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe f80f 	bl	800124c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0c5      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCC_OscConfig+0x33a>
 800324c:	e014      	b.n	8003278 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fd fffd 	bl	800124c <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fd fff9 	bl	800124c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	; 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0af      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	4b5a      	ldr	r3, [pc, #360]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327e:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a55      	ldr	r2, [pc, #340]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 809b 	beq.w	80033ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b08      	cmp	r3, #8
 800329e:	d05c      	beq.n	800335a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d141      	bne.n	800332c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_RCC_OscConfig+0x4ec>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fd ffcd 	bl	800124c <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fd ffc9 	bl	800124c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e081      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	019b      	lsls	r3, r3, #6
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	3b01      	subs	r3, #1
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	061b      	lsls	r3, r3, #24
 80032f8:	4937      	ldr	r1, [pc, #220]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCC_OscConfig+0x4ec>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fd ffa2 	bl	800124c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330c:	f7fd ff9e 	bl	800124c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e056      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x41c>
 800332a:	e04e      	b.n	80033ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_OscConfig+0x4ec>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fd ff8b 	bl	800124c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333a:	f7fd ff87 	bl	800124c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e03f      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x44a>
 8003358:	e037      	b.n	80033ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e032      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003366:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <HAL_RCC_OscConfig+0x4e8>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d028      	beq.n	80033c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d121      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d11a      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003396:	4013      	ands	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800339c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800339e:	4293      	cmp	r3, r2
 80033a0:	d111      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	3b01      	subs	r3, #1
 80033b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40007000 	.word	0x40007000
 80033d8:	40023800 	.word	0x40023800
 80033dc:	42470060 	.word	0x42470060

080033e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0cc      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b68      	ldr	r3, [pc, #416]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d90c      	bls.n	800341c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b65      	ldr	r3, [pc, #404]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b8      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a58      	ldr	r2, [pc, #352]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800343e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b50      	ldr	r3, [pc, #320]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	494d      	ldr	r1, [pc, #308]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d044      	beq.n	8003500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d119      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d003      	beq.n	800349e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349a:	2b03      	cmp	r3, #3
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349e:	4b3f      	ldr	r3, [pc, #252]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e06f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ae:	4b3b      	ldr	r3, [pc, #236]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e067      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f023 0203 	bic.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4934      	ldr	r1, [pc, #208]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d0:	f7fd febc 	bl	800124c <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d8:	f7fd feb8 	bl	800124c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e04f      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 020c 	and.w	r2, r3, #12
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d1eb      	bne.n	80034d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d20c      	bcs.n	8003528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e032      	b.n	800358e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4916      	ldr	r1, [pc, #88]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003566:	f000 f82d 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490a      	ldr	r1, [pc, #40]	; (80035a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fe1c 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023c00 	.word	0x40023c00
 800359c:	40023800 	.word	0x40023800
 80035a0:	08008898 	.word	0x08008898
 80035a4:	20000000 	.word	0x20000000
 80035a8:	2000009c 	.word	0x2000009c

080035ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_EnableCSS+0x14>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	4247004c 	.word	0x4247004c

080035c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035ca:	2100      	movs	r1, #0
 80035cc:	6079      	str	r1, [r7, #4]
 80035ce:	2100      	movs	r1, #0
 80035d0:	60f9      	str	r1, [r7, #12]
 80035d2:	2100      	movs	r1, #0
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035d6:	2100      	movs	r1, #0
 80035d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035da:	4952      	ldr	r1, [pc, #328]	; (8003724 <HAL_RCC_GetSysClockFreq+0x160>)
 80035dc:	6889      	ldr	r1, [r1, #8]
 80035de:	f001 010c 	and.w	r1, r1, #12
 80035e2:	2908      	cmp	r1, #8
 80035e4:	d00d      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x3e>
 80035e6:	2908      	cmp	r1, #8
 80035e8:	f200 8094 	bhi.w	8003714 <HAL_RCC_GetSysClockFreq+0x150>
 80035ec:	2900      	cmp	r1, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x32>
 80035f0:	2904      	cmp	r1, #4
 80035f2:	d003      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x38>
 80035f4:	e08e      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f6:	4b4c      	ldr	r3, [pc, #304]	; (8003728 <HAL_RCC_GetSysClockFreq+0x164>)
 80035f8:	60bb      	str	r3, [r7, #8]
       break;
 80035fa:	e08e      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <HAL_RCC_GetSysClockFreq+0x168>)
 80035fe:	60bb      	str	r3, [r7, #8]
      break;
 8003600:	e08b      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003602:	4948      	ldr	r1, [pc, #288]	; (8003724 <HAL_RCC_GetSysClockFreq+0x160>)
 8003604:	6849      	ldr	r1, [r1, #4]
 8003606:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800360a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800360c:	4945      	ldr	r1, [pc, #276]	; (8003724 <HAL_RCC_GetSysClockFreq+0x160>)
 800360e:	6849      	ldr	r1, [r1, #4]
 8003610:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003614:	2900      	cmp	r1, #0
 8003616:	d024      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	4942      	ldr	r1, [pc, #264]	; (8003724 <HAL_RCC_GetSysClockFreq+0x160>)
 800361a:	6849      	ldr	r1, [r1, #4]
 800361c:	0989      	lsrs	r1, r1, #6
 800361e:	4608      	mov	r0, r1
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003628:	f04f 0500 	mov.w	r5, #0
 800362c:	ea00 0204 	and.w	r2, r0, r4
 8003630:	ea01 0305 	and.w	r3, r1, r5
 8003634:	493d      	ldr	r1, [pc, #244]	; (800372c <HAL_RCC_GetSysClockFreq+0x168>)
 8003636:	fb01 f003 	mul.w	r0, r1, r3
 800363a:	2100      	movs	r1, #0
 800363c:	fb01 f102 	mul.w	r1, r1, r2
 8003640:	1844      	adds	r4, r0, r1
 8003642:	493a      	ldr	r1, [pc, #232]	; (800372c <HAL_RCC_GetSysClockFreq+0x168>)
 8003644:	fba2 0101 	umull	r0, r1, r2, r1
 8003648:	1863      	adds	r3, r4, r1
 800364a:	4619      	mov	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	f7fc fdb8 	bl	80001c8 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e04a      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003662:	4b30      	ldr	r3, [pc, #192]	; (8003724 <HAL_RCC_GetSysClockFreq+0x160>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	461a      	mov	r2, r3
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	ea02 0400 	and.w	r4, r2, r0
 800367a:	ea03 0501 	and.w	r5, r3, r1
 800367e:	4620      	mov	r0, r4
 8003680:	4629      	mov	r1, r5
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	014b      	lsls	r3, r1, #5
 800368c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003690:	0142      	lsls	r2, r0, #5
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	1b00      	subs	r0, r0, r4
 8003698:	eb61 0105 	sbc.w	r1, r1, r5
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	018b      	lsls	r3, r1, #6
 80036a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036aa:	0182      	lsls	r2, r0, #6
 80036ac:	1a12      	subs	r2, r2, r0
 80036ae:	eb63 0301 	sbc.w	r3, r3, r1
 80036b2:	f04f 0000 	mov.w	r0, #0
 80036b6:	f04f 0100 	mov.w	r1, #0
 80036ba:	00d9      	lsls	r1, r3, #3
 80036bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036c0:	00d0      	lsls	r0, r2, #3
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	1912      	adds	r2, r2, r4
 80036c8:	eb45 0303 	adc.w	r3, r5, r3
 80036cc:	f04f 0000 	mov.w	r0, #0
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	0299      	lsls	r1, r3, #10
 80036d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036da:	0290      	lsls	r0, r2, #10
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	f7fc fd6c 	bl	80001c8 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_RCC_GetSysClockFreq+0x160>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	60bb      	str	r3, [r7, #8]
      break;
 8003712:	e002      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <HAL_RCC_GetSysClockFreq+0x164>)
 8003716:	60bb      	str	r3, [r7, #8]
      break;
 8003718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371a:	68bb      	ldr	r3, [r7, #8]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	00f42400 	.word	0x00f42400
 800372c:	017d7840 	.word	0x017d7840

08003730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_RCC_GetHCLKFreq+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000000 	.word	0x20000000

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800374c:	f7ff fff0 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	0a9b      	lsrs	r3, r3, #10
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4903      	ldr	r1, [pc, #12]	; (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40023800 	.word	0x40023800
 800376c:	080088a8 	.word	0x080088a8

08003770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003774:	f7ff ffdc 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	0b5b      	lsrs	r3, r3, #13
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4903      	ldr	r1, [pc, #12]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	080088a8 	.word	0x080088a8

08003798 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d104      	bne.n	80037b2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80037a8:	f000 f80a 	bl	80037c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	701a      	strb	r2, [r3, #0]
  }
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	4002380e 	.word	0x4002380e

080037c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e07b      	b.n	80038d8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d108      	bne.n	80037fa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f0:	d009      	beq.n	8003806 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	61da      	str	r2, [r3, #28]
 80037f8:	e005      	b.n	8003806 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd f951 	bl	8000ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	ea42 0103 	orr.w	r1, r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	f003 0104 	and.w	r1, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f003 0210 	and.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e041      	b.n	8003976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd f926 	bl	8000b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 f95e 	bl	8003be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d122      	bne.n	80039da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d11b      	bne.n	80039da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f06f 0202 	mvn.w	r2, #2
 80039aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f8ee 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 80039c6:	e005      	b.n	80039d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f8e0 	bl	8003b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8f1 	bl	8003bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d122      	bne.n	8003a2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d11b      	bne.n	8003a2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0204 	mvn.w	r2, #4
 80039fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f8c4 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 8003a1a:	e005      	b.n	8003a28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8b6 	bl	8003b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8c7 	bl	8003bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d122      	bne.n	8003a82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d11b      	bne.n	8003a82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f06f 0208 	mvn.w	r2, #8
 8003a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2204      	movs	r2, #4
 8003a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f89a 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 8003a6e:	e005      	b.n	8003a7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f88c 	bl	8003b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f89d 	bl	8003bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d122      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d11b      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f06f 0210 	mvn.w	r2, #16
 8003aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2208      	movs	r2, #8
 8003aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f870 	bl	8003ba2 <HAL_TIM_IC_CaptureCallback>
 8003ac2:	e005      	b.n	8003ad0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f862 	bl	8003b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f873 	bl	8003bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d10e      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d107      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f06f 0201 	mvn.w	r2, #1
 8003afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fd faff 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0c:	2b80      	cmp	r3, #128	; 0x80
 8003b0e:	d10e      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	d107      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f97f 	bl	8003e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d10e      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d107      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f838 	bl	8003bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d10e      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d107      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f06f 0220 	mvn.w	r2, #32
 8003b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f949 	bl	8003e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a40      	ldr	r2, [pc, #256]	; (8003cf4 <TIM_Base_SetConfig+0x114>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfe:	d00f      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3d      	ldr	r2, [pc, #244]	; (8003cf8 <TIM_Base_SetConfig+0x118>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00b      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3c      	ldr	r2, [pc, #240]	; (8003cfc <TIM_Base_SetConfig+0x11c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d007      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3b      	ldr	r2, [pc, #236]	; (8003d00 <TIM_Base_SetConfig+0x120>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a3a      	ldr	r2, [pc, #232]	; (8003d04 <TIM_Base_SetConfig+0x124>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d108      	bne.n	8003c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <TIM_Base_SetConfig+0x114>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d02b      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d027      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <TIM_Base_SetConfig+0x118>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d023      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2b      	ldr	r2, [pc, #172]	; (8003cfc <TIM_Base_SetConfig+0x11c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01f      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <TIM_Base_SetConfig+0x120>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01b      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <TIM_Base_SetConfig+0x124>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d017      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <TIM_Base_SetConfig+0x128>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <TIM_Base_SetConfig+0x12c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00f      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <TIM_Base_SetConfig+0x130>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00b      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <TIM_Base_SetConfig+0x134>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d007      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <TIM_Base_SetConfig+0x138>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <TIM_Base_SetConfig+0x13c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d108      	bne.n	8003ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <TIM_Base_SetConfig+0x114>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_Base_SetConfig+0xf8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	; (8003d04 <TIM_Base_SetConfig+0x124>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d103      	bne.n	8003ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40000c00 	.word	0x40000c00
 8003d04:	40010400 	.word	0x40010400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800
 8003d14:	40001800 	.word	0x40001800
 8003d18:	40001c00 	.word	0x40001c00
 8003d1c:	40002000 	.word	0x40002000

08003d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e05a      	b.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d01d      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1a      	ldr	r2, [pc, #104]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d10c      	bne.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40010400 	.word	0x40010400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40001800 	.word	0x40001800

08003e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e03f      	b.n	8003ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fc fe9e 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	; 0x24
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fe1d 	bl	8004ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b08a      	sub	sp, #40	; 0x28
 8003ede:	af02      	add	r7, sp, #8
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d17c      	bne.n	8003ff4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_UART_Transmit+0x2c>
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e075      	b.n	8003ff6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_UART_Transmit+0x3e>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e06e      	b.n	8003ff6 <HAL_UART_Transmit+0x11c>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2221      	movs	r2, #33	; 0x21
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2e:	f7fd f98d 	bl	800124c <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d108      	bne.n	8003f5c <HAL_UART_Transmit+0x82>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e003      	b.n	8003f64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f6c:	e02a      	b.n	8003fc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fb9b 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e036      	b.n	8003ff6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	e007      	b.n	8003fb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1cf      	bne.n	8003f6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2140      	movs	r1, #64	; 0x40
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fb6b 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e006      	b.n	8003ff6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b08a      	sub	sp, #40	; 0x28
 8004002:	af02      	add	r7, sp, #8
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b20      	cmp	r3, #32
 800401c:	f040 808c 	bne.w	8004138 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_UART_Receive+0x2e>
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e084      	b.n	800413a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_UART_Receive+0x40>
 800403a:	2302      	movs	r3, #2
 800403c:	e07d      	b.n	800413a <HAL_UART_Receive+0x13c>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2222      	movs	r2, #34	; 0x22
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405a:	f7fd f8f7 	bl	800124c <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d108      	bne.n	8004088 <HAL_UART_Receive+0x8a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e003      	b.n	8004090 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004098:	e043      	b.n	8004122 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2200      	movs	r2, #0
 80040a2:	2120      	movs	r1, #32
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fb05 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e042      	b.n	800413a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10c      	bne.n	80040d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	3302      	adds	r3, #2
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e01f      	b.n	8004114 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d007      	beq.n	80040ee <HAL_UART_Receive+0xf0>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_UART_Receive+0xfe>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e008      	b.n	800410e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004108:	b2da      	uxtb	r2, r3
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1b6      	bne.n	800409a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b0ba      	sub	sp, #232	; 0xe8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004170:	2300      	movs	r3, #0
 8004172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004182:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_UART_IRQHandler+0x66>
 8004196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fbd3 	bl	800494e <UART_Receive_IT>
      return;
 80041a8:	e256      	b.n	8004658 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80de 	beq.w	8004370 <HAL_UART_IRQHandler+0x22c>
 80041b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d106      	bne.n	80041ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80d1 	beq.w	8004370 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <HAL_UART_IRQHandler+0xae>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f043 0201 	orr.w	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_UART_IRQHandler+0xd2>
 80041fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0202 	orr.w	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_UART_IRQHandler+0xf6>
 8004222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0204 	orr.w	r2, r3, #4
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d011      	beq.n	800426a <HAL_UART_IRQHandler+0x126>
 8004246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0208 	orr.w	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 81ed 	beq.w	800464e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_UART_IRQHandler+0x14e>
 8004280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fb5e 	bl	800494e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <HAL_UART_IRQHandler+0x17a>
 80042b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d04f      	beq.n	800435e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fa66 	bl	8004790 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b40      	cmp	r3, #64	; 0x40
 80042d0:	d141      	bne.n	8004356 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3314      	adds	r3, #20
 80042d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800430a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1d9      	bne.n	80042d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	2b00      	cmp	r3, #0
 8004324:	d013      	beq.n	800434e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	4a7d      	ldr	r2, [pc, #500]	; (8004520 <HAL_UART_IRQHandler+0x3dc>)
 800432c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd f93b 	bl	80015ae <HAL_DMA_Abort_IT>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d016      	beq.n	800436c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004348:	4610      	mov	r0, r2
 800434a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	e00e      	b.n	800436c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f99a 	bl	8004688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004354:	e00a      	b.n	800436c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f996 	bl	8004688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	e006      	b.n	800436c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f992 	bl	8004688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800436a:	e170      	b.n	800464e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	bf00      	nop
    return;
 800436e:	e16e      	b.n	800464e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	2b01      	cmp	r3, #1
 8004376:	f040 814a 	bne.w	800460e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8143 	beq.w	800460e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 813c 	beq.w	800460e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	f040 80b4 	bne.w	8004524 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8140 	beq.w	8004652 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043da:	429a      	cmp	r2, r3
 80043dc:	f080 8139 	bcs.w	8004652 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f2:	f000 8088 	beq.w	8004506 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800440c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	330c      	adds	r3, #12
 800441e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800442e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800443a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1d9      	bne.n	80043f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3314      	adds	r3, #20
 8004448:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3314      	adds	r3, #20
 8004462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004466:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800446a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800446e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e1      	bne.n	8004442 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800448e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e3      	bne.n	800447e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d6:	f023 0310 	bic.w	r3, r3, #16
 80044da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80044ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e3      	bne.n	80044c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc ffe4 	bl	80014ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800450e:	b29b      	uxth	r3, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	b29b      	uxth	r3, r3
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8c0 	bl	800469c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800451c:	e099      	b.n	8004652 <HAL_UART_IRQHandler+0x50e>
 800451e:	bf00      	nop
 8004520:	08004857 	.word	0x08004857
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800452c:	b29b      	uxth	r3, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 808b 	beq.w	8004656 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8086 	beq.w	8004656 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	330c      	adds	r3, #12
 8004550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800456e:	647a      	str	r2, [r7, #68]	; 0x44
 8004570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800457c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e3      	bne.n	800454a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3314      	adds	r3, #20
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	623b      	str	r3, [r7, #32]
   return(result);
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3314      	adds	r3, #20
 80045a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045a6:	633a      	str	r2, [r7, #48]	; 0x30
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e3      	bne.n	8004582 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0310 	bic.w	r3, r3, #16
 80045de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045ec:	61fa      	str	r2, [r7, #28]
 80045ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	69b9      	ldr	r1, [r7, #24]
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	617b      	str	r3, [r7, #20]
   return(result);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e3      	bne.n	80045c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f848 	bl	800469c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800460c:	e023      	b.n	8004656 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800460e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_UART_IRQHandler+0x4ea>
 800461a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f929 	bl	800487e <UART_Transmit_IT>
    return;
 800462c:	e014      	b.n	8004658 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00e      	beq.n	8004658 <HAL_UART_IRQHandler+0x514>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f969 	bl	800491e <UART_EndTransmit_IT>
    return;
 800464c:	e004      	b.n	8004658 <HAL_UART_IRQHandler+0x514>
    return;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <HAL_UART_IRQHandler+0x514>
      return;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <HAL_UART_IRQHandler+0x514>
      return;
 8004656:	bf00      	nop
  }
}
 8004658:	37e8      	adds	r7, #232	; 0xe8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop

08004660 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b090      	sub	sp, #64	; 0x40
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c4:	e050      	b.n	8004768 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d04c      	beq.n	8004768 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046d4:	f7fc fdba 	bl	800124c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d241      	bcs.n	8004768 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004704:	637a      	str	r2, [r7, #52]	; 0x34
 8004706:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800470a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3314      	adds	r3, #20
 800471e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	e853 3f00 	ldrex	r3, [r3]
 8004726:	613b      	str	r3, [r7, #16]
   return(result);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3314      	adds	r3, #20
 8004736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004738:	623a      	str	r2, [r7, #32]
 800473a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	69f9      	ldr	r1, [r7, #28]
 800473e:	6a3a      	ldr	r2, [r7, #32]
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	61bb      	str	r3, [r7, #24]
   return(result);
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e5      	bne.n	8004718 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e00f      	b.n	8004788 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	429a      	cmp	r2, r3
 8004784:	d09f      	beq.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3740      	adds	r7, #64	; 0x40
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b095      	sub	sp, #84	; 0x54
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b8:	643a      	str	r2, [r7, #64]	; 0x40
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	61fb      	str	r3, [r7, #28]
   return(result);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	2b01      	cmp	r3, #1
 8004806:	d119      	bne.n	800483c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	60bb      	str	r3, [r7, #8]
   return(result);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	647b      	str	r3, [r7, #68]	; 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004828:	61ba      	str	r2, [r7, #24]
 800482a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6979      	ldr	r1, [r7, #20]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	613b      	str	r3, [r7, #16]
   return(result);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e5      	bne.n	8004808 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
}
 800484a:	bf00      	nop
 800484c:	3754      	adds	r7, #84	; 0x54
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff ff09 	bl	8004688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b21      	cmp	r3, #33	; 0x21
 8004890:	d13e      	bne.n	8004910 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489a:	d114      	bne.n	80048c6 <UART_Transmit_IT+0x48>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d110      	bne.n	80048c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	1c9a      	adds	r2, r3, #2
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	621a      	str	r2, [r3, #32]
 80048c4:	e008      	b.n	80048d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6211      	str	r1, [r2, #32]
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4619      	mov	r1, r3
 80048e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10f      	bne.n	800490c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800490a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	e000      	b.n	8004912 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004934:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fe8e 	bl	8004660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b08c      	sub	sp, #48	; 0x30
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b22      	cmp	r3, #34	; 0x22
 8004960:	f040 80ab 	bne.w	8004aba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496c:	d117      	bne.n	800499e <UART_Receive_IT+0x50>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d113      	bne.n	800499e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	b29a      	uxth	r2, r3
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	1c9a      	adds	r2, r3, #2
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
 800499c:	e026      	b.n	80049ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b0:	d007      	beq.n	80049c2 <UART_Receive_IT+0x74>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <UART_Receive_IT+0x82>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	e008      	b.n	80049e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4619      	mov	r1, r3
 80049fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d15a      	bne.n	8004ab6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0220 	bic.w	r2, r2, #32
 8004a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d135      	bne.n	8004aac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	613b      	str	r3, [r7, #16]
   return(result);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f023 0310 	bic.w	r3, r3, #16
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	623a      	str	r2, [r7, #32]
 8004a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	69f9      	ldr	r1, [r7, #28]
 8004a6c:	6a3a      	ldr	r2, [r7, #32]
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d10a      	bne.n	8004a9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff fdf9 	bl	800469c <HAL_UARTEx_RxEventCallback>
 8004aaa:	e002      	b.n	8004ab2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fde1 	bl	8004674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e002      	b.n	8004abc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3730      	adds	r7, #48	; 0x30
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	b09f      	sub	sp, #124	; 0x7c
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ada:	68d9      	ldr	r1, [r3, #12]
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	ea40 0301 	orr.w	r3, r0, r1
 8004ae4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b08:	f021 010c 	bic.w	r1, r1, #12
 8004b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b12:	430b      	orrs	r3, r1
 8004b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b22:	6999      	ldr	r1, [r3, #24]
 8004b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	ea40 0301 	orr.w	r3, r0, r1
 8004b2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4bc5      	ldr	r3, [pc, #788]	; (8004e48 <UART_SetConfig+0x384>)
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d004      	beq.n	8004b42 <UART_SetConfig+0x7e>
 8004b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4bc3      	ldr	r3, [pc, #780]	; (8004e4c <UART_SetConfig+0x388>)
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d103      	bne.n	8004b4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b42:	f7fe fe15 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8004b46:	6778      	str	r0, [r7, #116]	; 0x74
 8004b48:	e002      	b.n	8004b50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4a:	f7fe fdfd 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8004b4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	f040 80b6 	bne.w	8004cc8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5e:	461c      	mov	r4, r3
 8004b60:	f04f 0500 	mov.w	r5, #0
 8004b64:	4622      	mov	r2, r4
 8004b66:	462b      	mov	r3, r5
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b74:	1912      	adds	r2, r2, r4
 8004b76:	eb45 0303 	adc.w	r3, r5, r3
 8004b7a:	f04f 0000 	mov.w	r0, #0
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	00d9      	lsls	r1, r3, #3
 8004b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b88:	00d0      	lsls	r0, r2, #3
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	1911      	adds	r1, r2, r4
 8004b90:	6639      	str	r1, [r7, #96]	; 0x60
 8004b92:	416b      	adcs	r3, r5
 8004b94:	667b      	str	r3, [r7, #100]	; 0x64
 8004b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004bb0:	f7fb fb0a 	bl	80001c8 <__aeabi_uldivmod>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4ba5      	ldr	r3, [pc, #660]	; (8004e50 <UART_SetConfig+0x38c>)
 8004bba:	fba3 2302 	umull	r2, r3, r3, r2
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	011e      	lsls	r6, r3, #4
 8004bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc4:	461c      	mov	r4, r3
 8004bc6:	f04f 0500 	mov.w	r5, #0
 8004bca:	4622      	mov	r2, r4
 8004bcc:	462b      	mov	r3, r5
 8004bce:	1891      	adds	r1, r2, r2
 8004bd0:	6339      	str	r1, [r7, #48]	; 0x30
 8004bd2:	415b      	adcs	r3, r3
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bda:	1912      	adds	r2, r2, r4
 8004bdc:	eb45 0303 	adc.w	r3, r5, r3
 8004be0:	f04f 0000 	mov.w	r0, #0
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	00d9      	lsls	r1, r3, #3
 8004bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bee:	00d0      	lsls	r0, r2, #3
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	1911      	adds	r1, r2, r4
 8004bf6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bf8:	416b      	adcs	r3, r5
 8004bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	461a      	mov	r2, r3
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	1891      	adds	r1, r2, r2
 8004c08:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c0a:	415b      	adcs	r3, r3
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c16:	f7fb fad7 	bl	80001c8 <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4b8c      	ldr	r3, [pc, #560]	; (8004e50 <UART_SetConfig+0x38c>)
 8004c20:	fba3 1302 	umull	r1, r3, r3, r2
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	2164      	movs	r1, #100	; 0x64
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	3332      	adds	r3, #50	; 0x32
 8004c32:	4a87      	ldr	r2, [pc, #540]	; (8004e50 <UART_SetConfig+0x38c>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c40:	441e      	add	r6, r3
 8004c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c44:	4618      	mov	r0, r3
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	1894      	adds	r4, r2, r2
 8004c50:	623c      	str	r4, [r7, #32]
 8004c52:	415b      	adcs	r3, r3
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
 8004c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c5a:	1812      	adds	r2, r2, r0
 8004c5c:	eb41 0303 	adc.w	r3, r1, r3
 8004c60:	f04f 0400 	mov.w	r4, #0
 8004c64:	f04f 0500 	mov.w	r5, #0
 8004c68:	00dd      	lsls	r5, r3, #3
 8004c6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c6e:	00d4      	lsls	r4, r2, #3
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	1814      	adds	r4, r2, r0
 8004c76:	653c      	str	r4, [r7, #80]	; 0x50
 8004c78:	414b      	adcs	r3, r1
 8004c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	1891      	adds	r1, r2, r2
 8004c88:	61b9      	str	r1, [r7, #24]
 8004c8a:	415b      	adcs	r3, r3
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c96:	f7fb fa97 	bl	80001c8 <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4b6c      	ldr	r3, [pc, #432]	; (8004e50 <UART_SetConfig+0x38c>)
 8004ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	2164      	movs	r1, #100	; 0x64
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	3332      	adds	r3, #50	; 0x32
 8004cb2:	4a67      	ldr	r2, [pc, #412]	; (8004e50 <UART_SetConfig+0x38c>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	f003 0207 	and.w	r2, r3, #7
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4432      	add	r2, r6
 8004cc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc6:	e0b9      	b.n	8004e3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cca:	461c      	mov	r4, r3
 8004ccc:	f04f 0500 	mov.w	r5, #0
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	6139      	str	r1, [r7, #16]
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ce0:	1912      	adds	r2, r2, r4
 8004ce2:	eb45 0303 	adc.w	r3, r5, r3
 8004ce6:	f04f 0000 	mov.w	r0, #0
 8004cea:	f04f 0100 	mov.w	r1, #0
 8004cee:	00d9      	lsls	r1, r3, #3
 8004cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cf4:	00d0      	lsls	r0, r2, #3
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	eb12 0804 	adds.w	r8, r2, r4
 8004cfe:	eb43 0905 	adc.w	r9, r3, r5
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	008b      	lsls	r3, r1, #2
 8004d16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d1a:	0082      	lsls	r2, r0, #2
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4649      	mov	r1, r9
 8004d20:	f7fb fa52 	bl	80001c8 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4b49      	ldr	r3, [pc, #292]	; (8004e50 <UART_SetConfig+0x38c>)
 8004d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	011e      	lsls	r6, r3, #4
 8004d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d34:	4618      	mov	r0, r3
 8004d36:	f04f 0100 	mov.w	r1, #0
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	1894      	adds	r4, r2, r2
 8004d40:	60bc      	str	r4, [r7, #8]
 8004d42:	415b      	adcs	r3, r3
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4a:	1812      	adds	r2, r2, r0
 8004d4c:	eb41 0303 	adc.w	r3, r1, r3
 8004d50:	f04f 0400 	mov.w	r4, #0
 8004d54:	f04f 0500 	mov.w	r5, #0
 8004d58:	00dd      	lsls	r5, r3, #3
 8004d5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d5e:	00d4      	lsls	r4, r2, #3
 8004d60:	4622      	mov	r2, r4
 8004d62:	462b      	mov	r3, r5
 8004d64:	1814      	adds	r4, r2, r0
 8004d66:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d68:	414b      	adcs	r3, r1
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f04f 0100 	mov.w	r1, #0
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	008b      	lsls	r3, r1, #2
 8004d80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d84:	0082      	lsls	r2, r0, #2
 8004d86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d8a:	f7fb fa1d 	bl	80001c8 <__aeabi_uldivmod>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <UART_SetConfig+0x38c>)
 8004d94:	fba3 1302 	umull	r1, r3, r3, r2
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	2164      	movs	r1, #100	; 0x64
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	3332      	adds	r3, #50	; 0x32
 8004da6:	4a2a      	ldr	r2, [pc, #168]	; (8004e50 <UART_SetConfig+0x38c>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db2:	441e      	add	r6, r3
 8004db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db6:	4618      	mov	r0, r3
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	1894      	adds	r4, r2, r2
 8004dc2:	603c      	str	r4, [r7, #0]
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dcc:	1812      	adds	r2, r2, r0
 8004dce:	eb41 0303 	adc.w	r3, r1, r3
 8004dd2:	f04f 0400 	mov.w	r4, #0
 8004dd6:	f04f 0500 	mov.w	r5, #0
 8004dda:	00dd      	lsls	r5, r3, #3
 8004ddc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004de0:	00d4      	lsls	r4, r2, #3
 8004de2:	4622      	mov	r2, r4
 8004de4:	462b      	mov	r3, r5
 8004de6:	eb12 0a00 	adds.w	sl, r2, r0
 8004dea:	eb43 0b01 	adc.w	fp, r3, r1
 8004dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	008b      	lsls	r3, r1, #2
 8004e02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e06:	0082      	lsls	r2, r0, #2
 8004e08:	4650      	mov	r0, sl
 8004e0a:	4659      	mov	r1, fp
 8004e0c:	f7fb f9dc 	bl	80001c8 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <UART_SetConfig+0x38c>)
 8004e16:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2164      	movs	r1, #100	; 0x64
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	3332      	adds	r3, #50	; 0x32
 8004e28:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <UART_SetConfig+0x38c>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	f003 020f 	and.w	r2, r3, #15
 8004e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4432      	add	r2, r6
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	377c      	adds	r7, #124	; 0x7c
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	bf00      	nop
 8004e48:	40011000 	.word	0x40011000
 8004e4c:	40011400 	.word	0x40011400
 8004e50:	51eb851f 	.word	0x51eb851f

08004e54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e54:	b084      	sub	sp, #16
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	f107 001c 	add.w	r0, r7, #28
 8004e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d122      	bne.n	8004eb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 fb1c 	bl	80064e4 <USB_CoreReset>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
 8004eb0:	e01a      	b.n	8004ee8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f001 fb10 	bl	80064e4 <USB_CoreReset>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eda:	e005      	b.n	8004ee8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d10b      	bne.n	8004f06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f043 0206 	orr.w	r2, r3, #6
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f12:	b004      	add	sp, #16
 8004f14:	4770      	bx	lr
	...

08004f18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d165      	bne.n	8004ff8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a41      	ldr	r2, [pc, #260]	; (8005034 <USB_SetTurnaroundTime+0x11c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d906      	bls.n	8004f42 <USB_SetTurnaroundTime+0x2a>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <USB_SetTurnaroundTime+0x120>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d202      	bcs.n	8004f42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e062      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a3c      	ldr	r2, [pc, #240]	; (8005038 <USB_SetTurnaroundTime+0x120>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d306      	bcc.n	8004f58 <USB_SetTurnaroundTime+0x40>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4a3b      	ldr	r2, [pc, #236]	; (800503c <USB_SetTurnaroundTime+0x124>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d202      	bcs.n	8004f58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f52:	230e      	movs	r3, #14
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e057      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a38      	ldr	r2, [pc, #224]	; (800503c <USB_SetTurnaroundTime+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d306      	bcc.n	8004f6e <USB_SetTurnaroundTime+0x56>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4a37      	ldr	r2, [pc, #220]	; (8005040 <USB_SetTurnaroundTime+0x128>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d202      	bcs.n	8004f6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f68:	230d      	movs	r3, #13
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e04c      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a33      	ldr	r2, [pc, #204]	; (8005040 <USB_SetTurnaroundTime+0x128>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d306      	bcc.n	8004f84 <USB_SetTurnaroundTime+0x6c>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4a32      	ldr	r2, [pc, #200]	; (8005044 <USB_SetTurnaroundTime+0x12c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d802      	bhi.n	8004f84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f7e:	230c      	movs	r3, #12
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	e041      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <USB_SetTurnaroundTime+0x12c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d906      	bls.n	8004f9a <USB_SetTurnaroundTime+0x82>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <USB_SetTurnaroundTime+0x130>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d802      	bhi.n	8004f9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f94:	230b      	movs	r3, #11
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e036      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <USB_SetTurnaroundTime+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d906      	bls.n	8004fb0 <USB_SetTurnaroundTime+0x98>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4a29      	ldr	r2, [pc, #164]	; (800504c <USB_SetTurnaroundTime+0x134>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d802      	bhi.n	8004fb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004faa:	230a      	movs	r3, #10
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e02b      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a26      	ldr	r2, [pc, #152]	; (800504c <USB_SetTurnaroundTime+0x134>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d906      	bls.n	8004fc6 <USB_SetTurnaroundTime+0xae>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a25      	ldr	r2, [pc, #148]	; (8005050 <USB_SetTurnaroundTime+0x138>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d202      	bcs.n	8004fc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fc0:	2309      	movs	r3, #9
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e020      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	; (8005050 <USB_SetTurnaroundTime+0x138>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d306      	bcc.n	8004fdc <USB_SetTurnaroundTime+0xc4>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <USB_SetTurnaroundTime+0x13c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d802      	bhi.n	8004fdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e015      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <USB_SetTurnaroundTime+0x13c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d906      	bls.n	8004ff2 <USB_SetTurnaroundTime+0xda>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <USB_SetTurnaroundTime+0x140>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d202      	bcs.n	8004ff2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fec:	2307      	movs	r3, #7
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e00a      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e007      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ffe:	2309      	movs	r3, #9
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e001      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005004:	2309      	movs	r3, #9
 8005006:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	029b      	lsls	r3, r3, #10
 800501c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	00d8acbf 	.word	0x00d8acbf
 8005038:	00e4e1c0 	.word	0x00e4e1c0
 800503c:	00f42400 	.word	0x00f42400
 8005040:	01067380 	.word	0x01067380
 8005044:	011a499f 	.word	0x011a499f
 8005048:	01312cff 	.word	0x01312cff
 800504c:	014ca43f 	.word	0x014ca43f
 8005050:	016e3600 	.word	0x016e3600
 8005054:	01a6ab1f 	.word	0x01a6ab1f
 8005058:	01e84800 	.word	0x01e84800

0800505c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f043 0201 	orr.w	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d115      	bne.n	80050ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050ce:	2001      	movs	r0, #1
 80050d0:	f7fc f8c8 	bl	8001264 <HAL_Delay>
      ms++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f001 f972 	bl	80063c4 <USB_GetMode>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d01e      	beq.n	8005124 <USB_SetCurrentMode+0x84>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b31      	cmp	r3, #49	; 0x31
 80050ea:	d9f0      	bls.n	80050ce <USB_SetCurrentMode+0x2e>
 80050ec:	e01a      	b.n	8005124 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d115      	bne.n	8005120 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005100:	2001      	movs	r0, #1
 8005102:	f7fc f8af 	bl	8001264 <HAL_Delay>
      ms++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 f959 	bl	80063c4 <USB_GetMode>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <USB_SetCurrentMode+0x84>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b31      	cmp	r3, #49	; 0x31
 800511c:	d9f0      	bls.n	8005100 <USB_SetCurrentMode+0x60>
 800511e:	e001      	b.n	8005124 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e005      	b.n	8005130 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b32      	cmp	r3, #50	; 0x32
 8005128:	d101      	bne.n	800512e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005138:	b084      	sub	sp, #16
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e009      	b.n	800516c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3340      	adds	r3, #64	; 0x40
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b0e      	cmp	r3, #14
 8005170:	d9f2      	bls.n	8005158 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d11c      	bne.n	80051b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005186:	f043 0302 	orr.w	r3, r3, #2
 800518a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
 80051b0:	e00b      	b.n	80051ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051dc:	4619      	mov	r1, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	461a      	mov	r2, r3
 80051e6:	680b      	ldr	r3, [r1, #0]
 80051e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10c      	bne.n	800520a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051f6:	2100      	movs	r1, #0
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f945 	bl	8005488 <USB_SetDevSpeed>
 80051fe:	e008      	b.n	8005212 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f940 	bl	8005488 <USB_SetDevSpeed>
 8005208:	e003      	b.n	8005212 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800520a:	2103      	movs	r1, #3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f93b 	bl	8005488 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005212:	2110      	movs	r1, #16
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8f3 	bl	8005400 <USB_FlushTxFifo>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f90f 	bl	8005448 <USB_FlushRxFifo>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	461a      	mov	r2, r3
 800523c:	2300      	movs	r3, #0
 800523e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	461a      	mov	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e043      	b.n	80052e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005274:	d118      	bne.n	80052a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	461a      	mov	r2, r3
 800528a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e013      	b.n	80052ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e008      	b.n	80052ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	2300      	movs	r3, #0
 80052b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	461a      	mov	r2, r3
 80052c8:	2300      	movs	r3, #0
 80052ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	461a      	mov	r2, r3
 80052da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3301      	adds	r3, #1
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3b7      	bcc.n	800525e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e043      	b.n	800537c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800530a:	d118      	bne.n	800533e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e013      	b.n	8005350 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	461a      	mov	r2, r3
 8005336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e008      	b.n	8005350 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3301      	adds	r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	429a      	cmp	r2, r3
 8005382:	d3b7      	bcc.n	80052f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f043 0210 	orr.w	r2, r3, #16
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <USB_DevInit+0x2c4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f043 0208 	orr.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f8:	b004      	add	sp, #16
 80053fa:	4770      	bx	lr
 80053fc:	803c3800 	.word	0x803c3800

08005400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	019b      	lsls	r3, r3, #6
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3301      	adds	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <USB_FlushTxFifo+0x44>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e006      	b.n	8005438 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d0f1      	beq.n	800541a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	00030d40 	.word	0x00030d40

08005448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2210      	movs	r2, #16
 8005458:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	4a08      	ldr	r2, [pc, #32]	; (8005484 <USB_FlushRxFifo+0x3c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e006      	b.n	8005478 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b10      	cmp	r3, #16
 8005474:	d0f1      	beq.n	800545a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	00030d40 	.word	0x00030d40

08005488 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0306 	and.w	r3, r3, #6
 80054d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
 80054de:	e00a      	b.n	80054f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d002      	beq.n	80054ec <USB_GetDevSpeed+0x32>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b06      	cmp	r3, #6
 80054ea:	d102      	bne.n	80054f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054ec:	2302      	movs	r3, #2
 80054ee:	75fb      	strb	r3, [r7, #23]
 80054f0:	e001      	b.n	80054f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054f2:	230f      	movs	r3, #15
 80054f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d13a      	bne.n	8005596 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	2101      	movs	r1, #1
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	b29b      	uxth	r3, r3
 8005538:	68f9      	ldr	r1, [r7, #12]
 800553a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800553e:	4313      	orrs	r3, r2
 8005540:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d155      	bne.n	8005604 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	78db      	ldrb	r3, [r3, #3]
 8005572:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005574:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	059b      	lsls	r3, r3, #22
 800557a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800557c:	4313      	orrs	r3, r2
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	e036      	b.n	8005604 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	2101      	movs	r1, #1
 80055a8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d11a      	bne.n	8005604 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	78db      	ldrb	r3, [r3, #3]
 80055e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055ea:	430b      	orrs	r3, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005602:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d161      	bne.n	80056f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005646:	d11f      	bne.n	8005688 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005666:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	2101      	movs	r1, #1
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	b29b      	uxth	r3, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a8:	4013      	ands	r3, r2
 80056aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	2101      	movs	r1, #1
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056cc:	4013      	ands	r3, r2
 80056ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	0159      	lsls	r1, r3, #5
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	440b      	add	r3, r1
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	4619      	mov	r1, r3
 80056ec:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <USB_DeactivateEndpoint+0x1b0>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]
 80056f2:	e060      	b.n	80057b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800570a:	d11f      	bne.n	800574c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800572a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800574a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	43db      	mvns	r3, r3
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800576c:	4013      	ands	r3, r2
 800576e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	43db      	mvns	r3, r3
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005790:	4013      	ands	r3, r2
 8005792:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	0159      	lsls	r1, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	440b      	add	r3, r1
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	4619      	mov	r1, r3
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <USB_DeactivateEndpoint+0x1b4>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	ec337800 	.word	0xec337800
 80057c8:	eff37800 	.word	0xeff37800

080057cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08a      	sub	sp, #40	; 0x28
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 815c 	bne.w	8005aa6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d132      	bne.n	800585c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	0cdb      	lsrs	r3, r3, #19
 8005856:	04db      	lsls	r3, r3, #19
 8005858:	6113      	str	r3, [r2, #16]
 800585a:	e074      	b.n	8005946 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005876:	0cdb      	lsrs	r3, r3, #19
 8005878:	04db      	lsls	r3, r3, #19
 800587a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005896:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800589a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800589e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	440b      	add	r3, r1
 80058b8:	1e59      	subs	r1, r3, #1
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	fbb1 f3f3 	udiv	r3, r1, r3
 80058c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058c4:	4b9d      	ldr	r3, [pc, #628]	; (8005b3c <USB_EPStartXfer+0x370>)
 80058c6:	400b      	ands	r3, r1
 80058c8:	69b9      	ldr	r1, [r7, #24]
 80058ca:	0148      	lsls	r0, r1, #5
 80058cc:	69f9      	ldr	r1, [r7, #28]
 80058ce:	4401      	add	r1, r0
 80058d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058d4:	4313      	orrs	r3, r2
 80058d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ee:	69b9      	ldr	r1, [r7, #24]
 80058f0:	0148      	lsls	r0, r1, #5
 80058f2:	69f9      	ldr	r1, [r7, #28]
 80058f4:	4401      	add	r1, r0
 80058f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058fa:	4313      	orrs	r3, r2
 80058fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	78db      	ldrb	r3, [r3, #3]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d11f      	bne.n	8005946 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005924:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005944:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d14b      	bne.n	80059e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	78db      	ldrb	r3, [r3, #3]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d128      	bne.n	80059c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d110      	bne.n	80059a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	e00f      	b.n	80059c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e12f      	b.n	8005c44 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d015      	beq.n	8005a38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8117 	beq.w	8005c44 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	2101      	movs	r1, #1
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	69f9      	ldr	r1, [r7, #28]
 8005a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a32:	4313      	orrs	r3, r2
 8005a34:	634b      	str	r3, [r1, #52]	; 0x34
 8005a36:	e105      	b.n	8005c44 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d110      	bne.n	8005a6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e00f      	b.n	8005a8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	68d9      	ldr	r1, [r3, #12]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	b298      	uxth	r0, r3
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fa2b 	bl	8005efa <USB_WritePacket>
 8005aa4:	e0ce      	b.n	8005c44 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac0:	0cdb      	lsrs	r3, r3, #19
 8005ac2:	04db      	lsls	r3, r3, #19
 8005ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ae4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ae8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d126      	bne.n	8005b40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b08:	69b9      	ldr	r1, [r7, #24]
 8005b0a:	0148      	lsls	r0, r1, #5
 8005b0c:	69f9      	ldr	r1, [r7, #28]
 8005b0e:	4401      	add	r1, r0
 8005b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b14:	4313      	orrs	r3, r2
 8005b16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b36:	6113      	str	r3, [r2, #16]
 8005b38:	e036      	b.n	8005ba8 <USB_EPStartXfer+0x3dc>
 8005b3a:	bf00      	nop
 8005b3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	4413      	add	r3, r2
 8005b4a:	1e5a      	subs	r2, r3, #1
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	8afb      	ldrh	r3, [r7, #22]
 8005b66:	04d9      	lsls	r1, r3, #19
 8005b68:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <USB_EPStartXfer+0x484>)
 8005b6a:	400b      	ands	r3, r1
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	0148      	lsls	r0, r1, #5
 8005b70:	69f9      	ldr	r1, [r7, #28]
 8005b72:	4401      	add	r1, r0
 8005b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	8af9      	ldrh	r1, [r7, #22]
 8005b90:	fb01 f303 	mul.w	r3, r1, r3
 8005b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	0148      	lsls	r0, r1, #5
 8005b9c:	69f9      	ldr	r1, [r7, #28]
 8005b9e:	4401      	add	r1, r0
 8005ba0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d10d      	bne.n	8005bca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	68d9      	ldr	r1, [r3, #12]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d128      	bne.n	8005c24 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d110      	bne.n	8005c04 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	e00f      	b.n	8005c24 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	1ff80000 	.word	0x1ff80000

08005c54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	f040 80cd 	bne.w	8005e10 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d132      	bne.n	8005ce4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cdc:	0cdb      	lsrs	r3, r3, #19
 8005cde:	04db      	lsls	r3, r3, #19
 8005ce0:	6113      	str	r3, [r2, #16]
 8005ce2:	e04e      	b.n	8005d82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfe:	0cdb      	lsrs	r3, r3, #19
 8005d00:	04db      	lsls	r3, r3, #19
 8005d02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d72:	6939      	ldr	r1, [r7, #16]
 8005d74:	0148      	lsls	r0, r1, #5
 8005d76:	6979      	ldr	r1, [r7, #20]
 8005d78:	4401      	add	r1, r0
 8005d7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d11e      	bne.n	8005dc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	e092      	b.n	8005eec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005de4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d07e      	beq.n	8005eec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	2101      	movs	r1, #1
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	6979      	ldr	r1, [r7, #20]
 8005e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	634b      	str	r3, [r1, #52]	; 0x34
 8005e0e:	e06d      	b.n	8005eec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2a:	0cdb      	lsrs	r3, r3, #19
 8005e2c:	04db      	lsls	r3, r3, #19
 8005e2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9a:	6939      	ldr	r1, [r7, #16]
 8005e9c:	0148      	lsls	r0, r1, #5
 8005e9e:	6979      	ldr	r1, [r7, #20]
 8005ea0:	4401      	add	r1, r0
 8005ea2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d10d      	bne.n	8005ecc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	68d9      	ldr	r1, [r3, #12]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	460a      	mov	r2, r1
 8005eca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b089      	sub	sp, #36	; 0x24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	4611      	mov	r1, r2
 8005f06:	461a      	mov	r2, r3
 8005f08:	460b      	mov	r3, r1
 8005f0a:	71fb      	strb	r3, [r7, #7]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d123      	bne.n	8005f68 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f20:	88bb      	ldrh	r3, [r7, #4]
 8005f22:	3303      	adds	r3, #3
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e018      	b.n	8005f60 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	031a      	lsls	r2, r3, #12
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d3e2      	bcc.n	8005f2e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3724      	adds	r7, #36	; 0x24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b08b      	sub	sp, #44	; 0x2c
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	e014      	b.n	8005fcc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	623b      	str	r3, [r7, #32]
 8005fcc:	6a3a      	ldr	r2, [r7, #32]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d3e6      	bcc.n	8005fa2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fd4:	8bfb      	ldrh	r3, [r7, #30]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01e      	beq.n	8006018 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f107 0310 	add.w	r3, r7, #16
 8005fea:	6812      	ldr	r2, [r2, #0]
 8005fec:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	701a      	strb	r2, [r3, #0]
      i++;
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	3301      	adds	r3, #1
 8006004:	623b      	str	r3, [r7, #32]
      pDest++;
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	3301      	adds	r3, #1
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800600c:	8bfb      	ldrh	r3, [r7, #30]
 800600e:	3b01      	subs	r3, #1
 8006010:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006012:	8bfb      	ldrh	r3, [r7, #30]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1ea      	bne.n	8005fee <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800601a:	4618      	mov	r0, r3
 800601c:	372c      	adds	r7, #44	; 0x2c
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d12c      	bne.n	800609c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	db12      	blt.n	800607a <USB_EPSetStall+0x54>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00f      	beq.n	800607a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006074:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006078:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	e02b      	b.n	80060f4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db12      	blt.n	80060d4 <USB_EPSetStall+0xae>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00f      	beq.n	80060d4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060d2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d128      	bne.n	8006170 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	440a      	add	r2, r1
 8006134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006138:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800613c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d003      	beq.n	800614e <USB_EPClearStall+0x4c>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	78db      	ldrb	r3, [r3, #3]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d138      	bne.n	80061c0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e027      	b.n	80061c0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	440a      	add	r2, r1
 8006186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800618a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800618e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	78db      	ldrb	r3, [r3, #3]
 8006194:	2b03      	cmp	r3, #3
 8006196:	d003      	beq.n	80061a0 <USB_EPClearStall+0x9e>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	78db      	ldrb	r3, [r3, #3]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d10f      	bne.n	80061c0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061be:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061f0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006248:	f023 0302 	bic.w	r3, r3, #2
 800624c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800628a:	f043 0302 	orr.w	r3, r3, #2
 800628e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4013      	ands	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062b6:	68fb      	ldr	r3, [r7, #12]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	4013      	ands	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	0c1b      	lsrs	r3, r3, #16
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	b29b      	uxth	r3, r3
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	4013      	ands	r3, r2
 8006358:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800635a:	68bb      	ldr	r3, [r7, #8]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
 8006398:	01db      	lsls	r3, r3, #7
 800639a:	b2db      	uxtb	r3, r3
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4013      	ands	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b6:	68bb      	ldr	r3, [r7, #8]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0301 	and.w	r3, r3, #1
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006416:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	460b      	mov	r3, r1
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	333c      	adds	r3, #60	; 0x3c
 800643e:	3304      	adds	r3, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4a26      	ldr	r2, [pc, #152]	; (80064e0 <USB_EP0_OutStart+0xb8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d90a      	bls.n	8006462 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645c:	d101      	bne.n	8006462 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	e037      	b.n	80064d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	461a      	mov	r2, r3
 800646a:	2300      	movs	r3, #0
 800646c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006490:	f043 0318 	orr.w	r3, r3, #24
 8006494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064aa:	7afb      	ldrb	r3, [r7, #11]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d10f      	bne.n	80064d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	4f54300a 	.word	0x4f54300a

080064e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3301      	adds	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	4a13      	ldr	r2, [pc, #76]	; (8006544 <USB_CoreReset+0x60>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d901      	bls.n	8006500 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e01a      	b.n	8006536 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	daf3      	bge.n	80064f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f043 0201 	orr.w	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3301      	adds	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <USB_CoreReset+0x60>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d901      	bls.n	8006528 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e006      	b.n	8006536 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d0f1      	beq.n	8006518 <USB_CoreReset+0x34>

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	00030d40 	.word	0x00030d40

08006548 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006554:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006558:	f002 f906 	bl	8008768 <USBD_static_malloc>
 800655c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d105      	bne.n	8006570 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800656c:	2302      	movs	r3, #2
 800656e:	e066      	b.n	800663e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7c1b      	ldrb	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d119      	bne.n	80065b4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006584:	2202      	movs	r2, #2
 8006586:	2181      	movs	r1, #129	; 0x81
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 ffca 	bl	8008522 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006598:	2202      	movs	r2, #2
 800659a:	2101      	movs	r1, #1
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 ffc0 	bl	8008522 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2210      	movs	r2, #16
 80065ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80065b2:	e016      	b.n	80065e2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065b4:	2340      	movs	r3, #64	; 0x40
 80065b6:	2202      	movs	r2, #2
 80065b8:	2181      	movs	r1, #129	; 0x81
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 ffb1 	bl	8008522 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065c6:	2340      	movs	r3, #64	; 0x40
 80065c8:	2202      	movs	r2, #2
 80065ca:	2101      	movs	r1, #1
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 ffa8 	bl	8008522 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2210      	movs	r2, #16
 80065de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065e2:	2308      	movs	r3, #8
 80065e4:	2203      	movs	r2, #3
 80065e6:	2182      	movs	r1, #130	; 0x82
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 ff9a 	bl	8008522 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7c1b      	ldrb	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d109      	bne.n	800662c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800661e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006622:	2101      	movs	r1, #1
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f002 f86b 	bl	8008700 <USBD_LL_PrepareReceive>
 800662a:	e007      	b.n	800663c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	2101      	movs	r1, #1
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f002 f862 	bl	8008700 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006652:	2181      	movs	r1, #129	; 0x81
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 ff8a 	bl	800856e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006660:	2101      	movs	r1, #1
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 ff83 	bl	800856e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006670:	2182      	movs	r1, #130	; 0x82
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f001 ff7b 	bl	800856e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00e      	beq.n	80066b0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a2:	4618      	mov	r0, r3
 80066a4:	f002 f86e 	bl	8008784 <USBD_static_free>
    pdev->pClassData = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e0af      	b.n	8006844 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d03f      	beq.n	8006770 <USBD_CDC_Setup+0xb4>
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	f040 809f 	bne.w	8006834 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	88db      	ldrh	r3, [r3, #6]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d02e      	beq.n	800675c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	b25b      	sxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	da16      	bge.n	8006736 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006714:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	88d2      	ldrh	r2, [r2, #6]
 800671a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	88db      	ldrh	r3, [r3, #6]
 8006720:	2b07      	cmp	r3, #7
 8006722:	bf28      	it	cs
 8006724:	2307      	movcs	r3, #7
 8006726:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	89fa      	ldrh	r2, [r7, #14]
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fae9 	bl	8007d06 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006734:	e085      	b.n	8006842 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	785a      	ldrb	r2, [r3, #1]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	88db      	ldrh	r3, [r3, #6]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800674c:	6939      	ldr	r1, [r7, #16]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	88db      	ldrh	r3, [r3, #6]
 8006752:	461a      	mov	r2, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fb02 	bl	8007d5e <USBD_CtlPrepareRx>
      break;
 800675a:	e072      	b.n	8006842 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	7850      	ldrb	r0, [r2, #1]
 8006768:	2200      	movs	r2, #0
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	4798      	blx	r3
      break;
 800676e:	e068      	b.n	8006842 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b0b      	cmp	r3, #11
 8006776:	d852      	bhi.n	800681e <USBD_CDC_Setup+0x162>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <USBD_CDC_Setup+0xc4>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067b1 	.word	0x080067b1
 8006784:	0800682d 	.word	0x0800682d
 8006788:	0800681f 	.word	0x0800681f
 800678c:	0800681f 	.word	0x0800681f
 8006790:	0800681f 	.word	0x0800681f
 8006794:	0800681f 	.word	0x0800681f
 8006798:	0800681f 	.word	0x0800681f
 800679c:	0800681f 	.word	0x0800681f
 80067a0:	0800681f 	.word	0x0800681f
 80067a4:	0800681f 	.word	0x0800681f
 80067a8:	080067db 	.word	0x080067db
 80067ac:	08006805 	.word	0x08006805
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d107      	bne.n	80067cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067bc:	f107 030a 	add.w	r3, r7, #10
 80067c0:	2202      	movs	r2, #2
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fa9e 	bl	8007d06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ca:	e032      	b.n	8006832 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fa28 	bl	8007c24 <USBD_CtlError>
            ret = USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	75fb      	strb	r3, [r7, #23]
          break;
 80067d8:	e02b      	b.n	8006832 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d107      	bne.n	80067f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067e6:	f107 030d 	add.w	r3, r7, #13
 80067ea:	2201      	movs	r2, #1
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fa89 	bl	8007d06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067f4:	e01d      	b.n	8006832 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fa13 	bl	8007c24 <USBD_CtlError>
            ret = USBD_FAIL;
 80067fe:	2303      	movs	r3, #3
 8006800:	75fb      	strb	r3, [r7, #23]
          break;
 8006802:	e016      	b.n	8006832 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b03      	cmp	r3, #3
 800680e:	d00f      	beq.n	8006830 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fa06 	bl	8007c24 <USBD_CtlError>
            ret = USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800681c:	e008      	b.n	8006830 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f9ff 	bl	8007c24 <USBD_CtlError>
          ret = USBD_FAIL;
 8006826:	2303      	movs	r3, #3
 8006828:	75fb      	strb	r3, [r7, #23]
          break;
 800682a:	e002      	b.n	8006832 <USBD_CDC_Setup+0x176>
          break;
 800682c:	bf00      	nop
 800682e:	e008      	b.n	8006842 <USBD_CDC_Setup+0x186>
          break;
 8006830:	bf00      	nop
      }
      break;
 8006832:	e006      	b.n	8006842 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 f9f4 	bl	8007c24 <USBD_CtlError>
      ret = USBD_FAIL;
 800683c:	2303      	movs	r3, #3
 800683e:	75fb      	strb	r3, [r7, #23]
      break;
 8006840:	bf00      	nop
  }

  return (uint8_t)ret;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800685e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800686a:	2303      	movs	r3, #3
 800686c:	e04f      	b.n	800690e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006874:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	3318      	adds	r3, #24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d029      	beq.n	80068e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	3318      	adds	r3, #24
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	78f9      	ldrb	r1, [r7, #3]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	460b      	mov	r3, r1
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	1a5b      	subs	r3, r3, r1
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4403      	add	r3, r0
 80068ac:	3344      	adds	r3, #68	; 0x44
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80068b4:	fb03 f301 	mul.w	r3, r3, r1
 80068b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d110      	bne.n	80068e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	3318      	adds	r3, #24
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068d2:	78f9      	ldrb	r1, [r7, #3]
 80068d4:	2300      	movs	r3, #0
 80068d6:	2200      	movs	r2, #0
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fef0 	bl	80086be <USBD_LL_Transmit>
 80068de:	e015      	b.n	800690c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006908:	78fa      	ldrb	r2, [r7, #3]
 800690a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	460b      	mov	r3, r1
 8006920:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006928:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	e015      	b.n	8006964 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 ff00 	bl	8008742 <USBD_LL_GetRxDataSize>
 8006942:	4602      	mov	r2, r0
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800695e:	4611      	mov	r1, r2
 8006960:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800697a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006982:	2303      	movs	r3, #3
 8006984:	e01b      	b.n	80069be <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d015      	beq.n	80069bc <USBD_CDC_EP0_RxReady+0x50>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006996:	2bff      	cmp	r3, #255	; 0xff
 8006998:	d010      	beq.n	80069bc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80069a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069b0:	b292      	uxth	r2, r2
 80069b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	22ff      	movs	r2, #255	; 0xff
 80069b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2243      	movs	r2, #67	; 0x43
 80069d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80069d6:	4b03      	ldr	r3, [pc, #12]	; (80069e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	2000012c 	.word	0x2000012c

080069e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2243      	movs	r2, #67	; 0x43
 80069f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80069f6:	4b03      	ldr	r3, [pc, #12]	; (8006a04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	200000e8 	.word	0x200000e8

08006a08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2243      	movs	r2, #67	; 0x43
 8006a14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006a16:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	20000170 	.word	0x20000170

08006a28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	220a      	movs	r2, #10
 8006a34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a36:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	200000a4 	.word	0x200000a4

08006a48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e004      	b.n	8006a66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b087      	sub	sp, #28
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a84:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e008      	b.n	8006aa2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006abe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e004      	b.n	8006ad4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e016      	b.n	8006b2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	7c1b      	ldrb	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b10:	2101      	movs	r1, #1
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fdf4 	bl	8008700 <USBD_LL_PrepareReceive>
 8006b18:	e007      	b.n	8006b2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	2101      	movs	r1, #1
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 fdeb 	bl	8008700 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e01f      	b.n	8006b8c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	79fa      	ldrb	r2, [r7, #7]
 8006b7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 fc67 	bl	8008454 <USBD_LL_Init>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e016      	b.n	8006bda <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	f107 020e 	add.w	r2, r7, #14
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fc7e 	bl	80084ec <USBD_LL_Start>
 8006bf0:	4603      	mov	r3, r0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	4611      	mov	r1, r2
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
  }

  return USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 ff90 	bl	8007bb0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d01a      	beq.n	8006cea <USBD_LL_SetupStage+0x72>
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d822      	bhi.n	8006cfe <USBD_LL_SetupStage+0x86>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <USBD_LL_SetupStage+0x4a>
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d00a      	beq.n	8006cd6 <USBD_LL_SetupStage+0x5e>
 8006cc0:	e01d      	b.n	8006cfe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa62 	bl	8007194 <USBD_StdDevReq>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	e020      	b.n	8006d18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fac6 	bl	8007270 <USBD_StdItfReq>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce8:	e016      	b.n	8006d18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fb05 	bl	8007302 <USBD_StdEPReq>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfc:	e00c      	b.n	8006d18 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 fc4d 	bl	80085ac <USBD_LL_StallEP>
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]
      break;
 8006d16:	bf00      	nop
  }

  return ret;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d30:	7afb      	ldrb	r3, [r7, #11]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d138      	bne.n	8006da8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d14a      	bne.n	8006dde <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d913      	bls.n	8006d7c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	1ad2      	subs	r2, r2, r3
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	bf28      	it	cs
 8006d6e:	4613      	movcs	r3, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f001 f80f 	bl	8007d98 <USBD_CtlContinueRx>
 8006d7a:	e030      	b.n	8006dde <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d10b      	bne.n	8006da0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f001 f80a 	bl	8007dba <USBD_CtlSendStatus>
 8006da6:	e01a      	b.n	8006dde <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d114      	bne.n	8006dde <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00e      	beq.n	8006dde <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	7afa      	ldrb	r2, [r7, #11]
 8006dca:	4611      	mov	r1, r2
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	4798      	blx	r3
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	e000      	b.n	8006de0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	460b      	mov	r3, r1
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d16b      	bne.n	8006ed4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3314      	adds	r3, #20
 8006e00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d156      	bne.n	8006eba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d914      	bls.n	8006e42 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	1ad2      	subs	r2, r2, r3
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 ff84 	bl	8007d3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e34:	2300      	movs	r3, #0
 8006e36:	2200      	movs	r2, #0
 8006e38:	2100      	movs	r1, #0
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f001 fc60 	bl	8008700 <USBD_LL_PrepareReceive>
 8006e40:	e03b      	b.n	8006eba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d11c      	bne.n	8006e88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d316      	bcc.n	8006e88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d20f      	bcs.n	8006e88 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 ff65 	bl	8007d3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2100      	movs	r1, #0
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f001 fc3d 	bl	8008700 <USBD_LL_PrepareReceive>
 8006e86:	e018      	b.n	8006eba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d10b      	bne.n	8006eac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eac:	2180      	movs	r1, #128	; 0x80
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f001 fb7c 	bl	80085ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 ff93 	bl	8007de0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d122      	bne.n	8006f0a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff fe98 	bl	8006bfa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ed2:	e01a      	b.n	8006f0a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d114      	bne.n	8006f0a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00e      	beq.n	8006f0a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	7afa      	ldrb	r2, [r7, #11]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	4798      	blx	r3
 8006efc:	4603      	mov	r3, r0
 8006efe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	e000      	b.n	8006f0c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e02f      	b.n	8006fa8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00f      	beq.n	8006f72 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6852      	ldr	r2, [r2, #4]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	2200      	movs	r2, #0
 8006f76:	2100      	movs	r1, #0
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fad2 	bl	8008522 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2240      	movs	r2, #64	; 0x40
 8006f8a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f8e:	2340      	movs	r3, #64	; 0x40
 8006f90:	2200      	movs	r2, #0
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fac4 	bl	8008522 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2240      	movs	r2, #64	; 0x40
 8006fa4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2204      	movs	r2, #4
 8006fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b04      	cmp	r3, #4
 800700e:	d106      	bne.n	800701e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007016:	b2da      	uxtb	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800703e:	2303      	movs	r3, #3
 8007040:	e012      	b.n	8007068 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b03      	cmp	r3, #3
 800704c:	d10b      	bne.n	8007066 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	e014      	b.n	80070b4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b03      	cmp	r3, #3
 8007094:	d10d      	bne.n	80070b2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d007      	beq.n	80070b2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	78fa      	ldrb	r2, [r7, #3]
 80070ac:	4611      	mov	r1, r2
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e014      	b.n	8007100 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d10d      	bne.n	80070fe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d007      	beq.n	80070fe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	4611      	mov	r1, r2
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d009      	beq.n	800714c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6852      	ldr	r2, [r2, #4]
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	4611      	mov	r1, r2
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
  }

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007156:	b480      	push	{r7}
 8007158:	b087      	sub	sp, #28
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	3301      	adds	r3, #1
 800716c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007174:	8a3b      	ldrh	r3, [r7, #16]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	b21a      	sxth	r2, r3
 800717a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800717e:	4313      	orrs	r3, r2
 8007180:	b21b      	sxth	r3, r3
 8007182:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007184:	89fb      	ldrh	r3, [r7, #14]
}
 8007186:	4618      	mov	r0, r3
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	d005      	beq.n	80071ba <USBD_StdDevReq+0x26>
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d853      	bhi.n	800725a <USBD_StdDevReq+0xc6>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00b      	beq.n	80071ce <USBD_StdDevReq+0x3a>
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d14f      	bne.n	800725a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	e04a      	b.n	8007264 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d83b      	bhi.n	800724e <USBD_StdDevReq+0xba>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <USBD_StdDevReq+0x48>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007231 	.word	0x08007231
 80071e0:	08007245 	.word	0x08007245
 80071e4:	0800724f 	.word	0x0800724f
 80071e8:	0800723b 	.word	0x0800723b
 80071ec:	0800724f 	.word	0x0800724f
 80071f0:	0800720f 	.word	0x0800720f
 80071f4:	08007205 	.word	0x08007205
 80071f8:	0800724f 	.word	0x0800724f
 80071fc:	08007227 	.word	0x08007227
 8007200:	08007219 	.word	0x08007219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f9de 	bl	80075c8 <USBD_GetDescriptor>
          break;
 800720c:	e024      	b.n	8007258 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fb43 	bl	800789c <USBD_SetAddress>
          break;
 8007216:	e01f      	b.n	8007258 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fb82 	bl	8007924 <USBD_SetConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
          break;
 8007224:	e018      	b.n	8007258 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fc21 	bl	8007a70 <USBD_GetConfig>
          break;
 800722e:	e013      	b.n	8007258 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fc52 	bl	8007adc <USBD_GetStatus>
          break;
 8007238:	e00e      	b.n	8007258 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc81 	bl	8007b44 <USBD_SetFeature>
          break;
 8007242:	e009      	b.n	8007258 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fc90 	bl	8007b6c <USBD_ClrFeature>
          break;
 800724c:	e004      	b.n	8007258 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fce7 	bl	8007c24 <USBD_CtlError>
          break;
 8007256:	bf00      	nop
      }
      break;
 8007258:	e004      	b.n	8007264 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fce1 	bl	8007c24 <USBD_CtlError>
      break;
 8007262:	bf00      	nop
  }

  return ret;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop

08007270 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d005      	beq.n	8007296 <USBD_StdItfReq+0x26>
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d82f      	bhi.n	80072ee <USBD_StdItfReq+0x7e>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <USBD_StdItfReq+0x26>
 8007292:	2b20      	cmp	r3, #32
 8007294:	d12b      	bne.n	80072ee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d81d      	bhi.n	80072e0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	889b      	ldrh	r3, [r3, #4]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d813      	bhi.n	80072d6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4798      	blx	r3
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	88db      	ldrh	r3, [r3, #6]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d110      	bne.n	80072ea <USBD_StdItfReq+0x7a>
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10d      	bne.n	80072ea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fd73 	bl	8007dba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072d4:	e009      	b.n	80072ea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fca3 	bl	8007c24 <USBD_CtlError>
          break;
 80072de:	e004      	b.n	80072ea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fc9e 	bl	8007c24 <USBD_CtlError>
          break;
 80072e8:	e000      	b.n	80072ec <USBD_StdItfReq+0x7c>
          break;
 80072ea:	bf00      	nop
      }
      break;
 80072ec:	e004      	b.n	80072f8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc97 	bl	8007c24 <USBD_CtlError>
      break;
 80072f6:	bf00      	nop
  }

  return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	889b      	ldrh	r3, [r3, #4]
 8007314:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d007      	beq.n	8007332 <USBD_StdEPReq+0x30>
 8007322:	2b40      	cmp	r3, #64	; 0x40
 8007324:	f200 8145 	bhi.w	80075b2 <USBD_StdEPReq+0x2b0>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00c      	beq.n	8007346 <USBD_StdEPReq+0x44>
 800732c:	2b20      	cmp	r3, #32
 800732e:	f040 8140 	bne.w	80075b2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
      break;
 8007344:	e13a      	b.n	80075bc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b03      	cmp	r3, #3
 800734c:	d007      	beq.n	800735e <USBD_StdEPReq+0x5c>
 800734e:	2b03      	cmp	r3, #3
 8007350:	f300 8129 	bgt.w	80075a6 <USBD_StdEPReq+0x2a4>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d07f      	beq.n	8007458 <USBD_StdEPReq+0x156>
 8007358:	2b01      	cmp	r3, #1
 800735a:	d03c      	beq.n	80073d6 <USBD_StdEPReq+0xd4>
 800735c:	e123      	b.n	80075a6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d002      	beq.n	8007370 <USBD_StdEPReq+0x6e>
 800736a:	2b03      	cmp	r3, #3
 800736c:	d016      	beq.n	800739c <USBD_StdEPReq+0x9a>
 800736e:	e02c      	b.n	80073ca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <USBD_StdEPReq+0x90>
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	2b80      	cmp	r3, #128	; 0x80
 800737a:	d00a      	beq.n	8007392 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 f913 	bl	80085ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007386:	2180      	movs	r1, #128	; 0x80
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 f90f 	bl	80085ac <USBD_LL_StallEP>
 800738e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007390:	e020      	b.n	80073d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc45 	bl	8007c24 <USBD_CtlError>
              break;
 800739a:	e01b      	b.n	80073d4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	885b      	ldrh	r3, [r3, #2]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10e      	bne.n	80073c2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00b      	beq.n	80073c2 <USBD_StdEPReq+0xc0>
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b80      	cmp	r3, #128	; 0x80
 80073ae:	d008      	beq.n	80073c2 <USBD_StdEPReq+0xc0>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	88db      	ldrh	r3, [r3, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f8f5 	bl	80085ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fcf9 	bl	8007dba <USBD_CtlSendStatus>

              break;
 80073c8:	e004      	b.n	80073d4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc29 	bl	8007c24 <USBD_CtlError>
              break;
 80073d2:	bf00      	nop
          }
          break;
 80073d4:	e0ec      	b.n	80075b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d002      	beq.n	80073e8 <USBD_StdEPReq+0xe6>
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d016      	beq.n	8007414 <USBD_StdEPReq+0x112>
 80073e6:	e030      	b.n	800744a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <USBD_StdEPReq+0x108>
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b80      	cmp	r3, #128	; 0x80
 80073f2:	d00a      	beq.n	800740a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 f8d7 	bl	80085ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073fe:	2180      	movs	r1, #128	; 0x80
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f8d3 	bl	80085ac <USBD_LL_StallEP>
 8007406:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007408:	e025      	b.n	8007456 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fc09 	bl	8007c24 <USBD_CtlError>
              break;
 8007412:	e020      	b.n	8007456 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	885b      	ldrh	r3, [r3, #2]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d11b      	bne.n	8007454 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 f8dd 	bl	80085ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fcc2 	bl	8007dba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
 8007444:	4603      	mov	r3, r0
 8007446:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007448:	e004      	b.n	8007454 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fbe9 	bl	8007c24 <USBD_CtlError>
              break;
 8007452:	e000      	b.n	8007456 <USBD_StdEPReq+0x154>
              break;
 8007454:	bf00      	nop
          }
          break;
 8007456:	e0ab      	b.n	80075b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d002      	beq.n	800746a <USBD_StdEPReq+0x168>
 8007464:	2b03      	cmp	r3, #3
 8007466:	d032      	beq.n	80074ce <USBD_StdEPReq+0x1cc>
 8007468:	e097      	b.n	800759a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <USBD_StdEPReq+0x17e>
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b80      	cmp	r3, #128	; 0x80
 8007474:	d004      	beq.n	8007480 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fbd3 	bl	8007c24 <USBD_CtlError>
                break;
 800747e:	e091      	b.n	80075a4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007484:	2b00      	cmp	r3, #0
 8007486:	da0b      	bge.n	80074a0 <USBD_StdEPReq+0x19e>
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	3310      	adds	r3, #16
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	4413      	add	r3, r2
 800749c:	3304      	adds	r3, #4
 800749e:	e00b      	b.n	80074b8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	4413      	add	r3, r2
 80074b6:	3304      	adds	r3, #4
 80074b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2202      	movs	r2, #2
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fc1d 	bl	8007d06 <USBD_CtlSendData>
              break;
 80074cc:	e06a      	b.n	80075a4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da11      	bge.n	80074fa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	3324      	adds	r3, #36	; 0x24
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d117      	bne.n	8007520 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fb96 	bl	8007c24 <USBD_CtlError>
                  break;
 80074f8:	e054      	b.n	80075a4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	f003 020f 	and.w	r2, r3, #15
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fb83 	bl	8007c24 <USBD_CtlError>
                  break;
 800751e:	e041      	b.n	80075a4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	da0b      	bge.n	8007540 <USBD_StdEPReq+0x23e>
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	3310      	adds	r3, #16
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	4413      	add	r3, r2
 800753c:	3304      	adds	r3, #4
 800753e:	e00b      	b.n	8007558 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	3304      	adds	r3, #4
 8007558:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <USBD_StdEPReq+0x264>
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d103      	bne.n	800756e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	e00e      	b.n	800758c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 f858 	bl	8008628 <USBD_LL_IsStallEP>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2201      	movs	r2, #1
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e002      	b.n	800758c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2202      	movs	r2, #2
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fbb7 	bl	8007d06 <USBD_CtlSendData>
              break;
 8007598:	e004      	b.n	80075a4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fb41 	bl	8007c24 <USBD_CtlError>
              break;
 80075a2:	bf00      	nop
          }
          break;
 80075a4:	e004      	b.n	80075b0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fb3b 	bl	8007c24 <USBD_CtlError>
          break;
 80075ae:	bf00      	nop
      }
      break;
 80075b0:	e004      	b.n	80075bc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fb35 	bl	8007c24 <USBD_CtlError>
      break;
 80075ba:	bf00      	nop
  }

  return ret;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	2b06      	cmp	r3, #6
 80075ea:	f200 8128 	bhi.w	800783e <USBD_GetDescriptor+0x276>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <USBD_GetDescriptor+0x2c>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007611 	.word	0x08007611
 80075f8:	08007629 	.word	0x08007629
 80075fc:	08007669 	.word	0x08007669
 8007600:	0800783f 	.word	0x0800783f
 8007604:	0800783f 	.word	0x0800783f
 8007608:	080077df 	.word	0x080077df
 800760c:	0800780b 	.word	0x0800780b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
      break;
 8007626:	e112      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7c1b      	ldrb	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10d      	bne.n	800764c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f107 0208 	add.w	r2, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800764a:	e100      	b.n	800784e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f107 0208 	add.w	r2, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	2202      	movs	r2, #2
 8007664:	701a      	strb	r2, [r3, #0]
      break;
 8007666:	e0f2      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b05      	cmp	r3, #5
 8007670:	f200 80ac 	bhi.w	80077cc <USBD_GetDescriptor+0x204>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <USBD_GetDescriptor+0xb4>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	08007695 	.word	0x08007695
 8007680:	080076c9 	.word	0x080076c9
 8007684:	080076fd 	.word	0x080076fd
 8007688:	08007731 	.word	0x08007731
 800768c:	08007765 	.word	0x08007765
 8007690:	08007799 	.word	0x08007799
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7c12      	ldrb	r2, [r2, #16]
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b6:	e091      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fab2 	bl	8007c24 <USBD_CtlError>
            err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
          break;
 80076c6:	e089      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ea:	e077      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa98 	bl	8007c24 <USBD_CtlError>
            err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
          break;
 80076fa:	e06f      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771e:	e05d      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa7e 	bl	8007c24 <USBD_CtlError>
            err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
          break;
 800772e:	e055      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007752:	e043      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa64 	bl	8007c24 <USBD_CtlError>
            err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
          break;
 8007762:	e03b      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007786:	e029      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa4a 	bl	8007c24 <USBD_CtlError>
            err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
          break;
 8007796:	e021      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ba:	e00f      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa30 	bl	8007c24 <USBD_CtlError>
            err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ca:	e007      	b.n	80077dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa28 	bl	8007c24 <USBD_CtlError>
          err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80077da:	bf00      	nop
      }
      break;
 80077dc:	e037      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7c1b      	ldrb	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ee:	f107 0208 	add.w	r2, r7, #8
 80077f2:	4610      	mov	r0, r2
 80077f4:	4798      	blx	r3
 80077f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077f8:	e029      	b.n	800784e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa11 	bl	8007c24 <USBD_CtlError>
        err++;
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	3301      	adds	r3, #1
 8007806:	72fb      	strb	r3, [r7, #11]
      break;
 8007808:	e021      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7c1b      	ldrb	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10d      	bne.n	800782e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	f107 0208 	add.w	r2, r7, #8
 800781e:	4610      	mov	r0, r2
 8007820:	4798      	blx	r3
 8007822:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	2207      	movs	r2, #7
 800782a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800782c:	e00f      	b.n	800784e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f9f7 	bl	8007c24 <USBD_CtlError>
        err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
      break;
 800783c:	e007      	b.n	800784e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9ef 	bl	8007c24 <USBD_CtlError>
      err++;
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	3301      	adds	r3, #1
 800784a:	72fb      	strb	r3, [r7, #11]
      break;
 800784c:	bf00      	nop
  }

  if (err != 0U)
 800784e:	7afb      	ldrb	r3, [r7, #11]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d11e      	bne.n	8007892 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	88db      	ldrh	r3, [r3, #6]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d016      	beq.n	800788a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800785c:	893b      	ldrh	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00e      	beq.n	8007880 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	88da      	ldrh	r2, [r3, #6]
 8007866:	893b      	ldrh	r3, [r7, #8]
 8007868:	4293      	cmp	r3, r2
 800786a:	bf28      	it	cs
 800786c:	4613      	movcs	r3, r2
 800786e:	b29b      	uxth	r3, r3
 8007870:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007872:	893b      	ldrh	r3, [r7, #8]
 8007874:	461a      	mov	r2, r3
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fa44 	bl	8007d06 <USBD_CtlSendData>
 800787e:	e009      	b.n	8007894 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f9ce 	bl	8007c24 <USBD_CtlError>
 8007888:	e004      	b.n	8007894 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa95 	bl	8007dba <USBD_CtlSendStatus>
 8007890:	e000      	b.n	8007894 <USBD_GetDescriptor+0x2cc>
    return;
 8007892:	bf00      	nop
  }
}
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop

0800789c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	889b      	ldrh	r3, [r3, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d131      	bne.n	8007912 <USBD_SetAddress+0x76>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	88db      	ldrh	r3, [r3, #6]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d12d      	bne.n	8007912 <USBD_SetAddress+0x76>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	885b      	ldrh	r3, [r3, #2]
 80078ba:	2b7f      	cmp	r3, #127	; 0x7f
 80078bc:	d829      	bhi.n	8007912 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	885b      	ldrh	r3, [r3, #2]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d104      	bne.n	80078e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9a3 	bl	8007c24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	e01d      	b.n	800791c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7bfa      	ldrb	r2, [r7, #15]
 80078e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fec7 	bl	8008680 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa61 	bl	8007dba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	e009      	b.n	800791c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007910:	e004      	b.n	800791c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f985 	bl	8007c24 <USBD_CtlError>
  }
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	885b      	ldrh	r3, [r3, #2]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	4b4c      	ldr	r3, [pc, #304]	; (8007a6c <USBD_SetConfig+0x148>)
 800793a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800793c:	4b4b      	ldr	r3, [pc, #300]	; (8007a6c <USBD_SetConfig+0x148>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d905      	bls.n	8007950 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f96c 	bl	8007c24 <USBD_CtlError>
    return USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	e088      	b.n	8007a62 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d002      	beq.n	8007962 <USBD_SetConfig+0x3e>
 800795c:	2b03      	cmp	r3, #3
 800795e:	d025      	beq.n	80079ac <USBD_SetConfig+0x88>
 8007960:	e071      	b.n	8007a46 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007962:	4b42      	ldr	r3, [pc, #264]	; (8007a6c <USBD_SetConfig+0x148>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d01c      	beq.n	80079a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800796a:	4b40      	ldr	r3, [pc, #256]	; (8007a6c <USBD_SetConfig+0x148>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007974:	4b3d      	ldr	r3, [pc, #244]	; (8007a6c <USBD_SetConfig+0x148>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff f948 	bl	8006c10 <USBD_SetClassConfig>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f949 	bl	8007c24 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007992:	e065      	b.n	8007a60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fa10 	bl	8007dba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2203      	movs	r2, #3
 800799e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079a2:	e05d      	b.n	8007a60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fa08 	bl	8007dba <USBD_CtlSendStatus>
      break;
 80079aa:	e059      	b.n	8007a60 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079ac:	4b2f      	ldr	r3, [pc, #188]	; (8007a6c <USBD_SetConfig+0x148>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d112      	bne.n	80079da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80079bc:	4b2b      	ldr	r3, [pc, #172]	; (8007a6c <USBD_SetConfig+0x148>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079c6:	4b29      	ldr	r3, [pc, #164]	; (8007a6c <USBD_SetConfig+0x148>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff f93b 	bl	8006c48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9f1 	bl	8007dba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079d8:	e042      	b.n	8007a60 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80079da:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <USBD_SetConfig+0x148>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d02a      	beq.n	8007a3e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff f929 	bl	8006c48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079f6:	4b1d      	ldr	r3, [pc, #116]	; (8007a6c <USBD_SetConfig+0x148>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <USBD_SetConfig+0x148>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff f902 	bl	8006c10 <USBD_SetClassConfig>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00f      	beq.n	8007a36 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f903 	bl	8007c24 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff f90e 	bl	8006c48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a34:	e014      	b.n	8007a60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9bf 	bl	8007dba <USBD_CtlSendStatus>
      break;
 8007a3c:	e010      	b.n	8007a60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f9bb 	bl	8007dba <USBD_CtlSendStatus>
      break;
 8007a44:	e00c      	b.n	8007a60 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f8eb 	bl	8007c24 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a4e:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <USBD_SetConfig+0x148>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff f8f7 	bl	8006c48 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a5e:	bf00      	nop
  }

  return ret;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200002c9 	.word	0x200002c9

08007a70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	88db      	ldrh	r3, [r3, #6]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d004      	beq.n	8007a8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8cd 	bl	8007c24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a8a:	e023      	b.n	8007ad4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	dc02      	bgt.n	8007a9e <USBD_GetConfig+0x2e>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dc03      	bgt.n	8007aa4 <USBD_GetConfig+0x34>
 8007a9c:	e015      	b.n	8007aca <USBD_GetConfig+0x5a>
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d00b      	beq.n	8007aba <USBD_GetConfig+0x4a>
 8007aa2:	e012      	b.n	8007aca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3308      	adds	r3, #8
 8007aae:	2201      	movs	r2, #1
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f927 	bl	8007d06 <USBD_CtlSendData>
        break;
 8007ab8:	e00c      	b.n	8007ad4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f91f 	bl	8007d06 <USBD_CtlSendData>
        break;
 8007ac8:	e004      	b.n	8007ad4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f8a9 	bl	8007c24 <USBD_CtlError>
        break;
 8007ad2:	bf00      	nop
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d81e      	bhi.n	8007b32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d004      	beq.n	8007b06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f890 	bl	8007c24 <USBD_CtlError>
        break;
 8007b04:	e01a      	b.n	8007b3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f043 0202 	orr.w	r2, r3, #2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	330c      	adds	r3, #12
 8007b26:	2202      	movs	r2, #2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8eb 	bl	8007d06 <USBD_CtlSendData>
      break;
 8007b30:	e004      	b.n	8007b3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f875 	bl	8007c24 <USBD_CtlError>
      break;
 8007b3a:	bf00      	nop
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	885b      	ldrh	r3, [r3, #2]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d106      	bne.n	8007b64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f92b 	bl	8007dba <USBD_CtlSendStatus>
  }
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d80b      	bhi.n	8007b9c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	885b      	ldrh	r3, [r3, #2]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d10c      	bne.n	8007ba6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f910 	bl	8007dba <USBD_CtlSendStatus>
      }
      break;
 8007b9a:	e004      	b.n	8007ba6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f840 	bl	8007c24 <USBD_CtlError>
      break;
 8007ba4:	e000      	b.n	8007ba8 <USBD_ClrFeature+0x3c>
      break;
 8007ba6:	bf00      	nop
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fabb 	bl	8007156 <SWAPBYTE>
 8007be0:	4603      	mov	r3, r0
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff faae 	bl	8007156 <SWAPBYTE>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff faa1 	bl	8007156 <SWAPBYTE>
 8007c14:	4603      	mov	r3, r0
 8007c16:	461a      	mov	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	80da      	strh	r2, [r3, #6]
}
 8007c1c:	bf00      	nop
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c2e:	2180      	movs	r1, #128	; 0x80
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fcbb 	bl	80085ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c36:	2100      	movs	r1, #0
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fcb7 	bl	80085ac <USBD_LL_StallEP>
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d036      	beq.n	8007cca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c60:	6938      	ldr	r0, [r7, #16]
 8007c62:	f000 f836 	bl	8007cd2 <USBD_GetLen>
 8007c66:	4603      	mov	r3, r0
 8007c68:	3301      	adds	r3, #1
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	7812      	ldrb	r2, [r2, #0]
 8007c7e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	3301      	adds	r3, #1
 8007c84:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	3301      	adds	r3, #1
 8007c94:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c96:	e013      	b.n	8007cc0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	7812      	ldrb	r2, [r2, #0]
 8007ca2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	613b      	str	r3, [r7, #16]
    idx++;
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	3301      	adds	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e7      	bne.n	8007c98 <USBD_GetString+0x52>
 8007cc8:	e000      	b.n	8007ccc <USBD_GetString+0x86>
    return;
 8007cca:	bf00      	nop
  }
}
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ce2:	e005      	b.n	8007cf0 <USBD_GetLen+0x1e>
  {
    len++;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3301      	adds	r3, #1
 8007cee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1f5      	bne.n	8007ce4 <USBD_GetLen+0x12>
  }

  return len;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2202      	movs	r2, #2
 8007d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fcc6 	bl	80086be <USBD_LL_Transmit>

  return USBD_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fcb5 	bl	80086be <USBD_LL_Transmit>

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	2100      	movs	r1, #0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fcb9 	bl	8008700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	2100      	movs	r1, #0
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fca8 	bl	8008700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2204      	movs	r2, #4
 8007dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2100      	movs	r1, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc74 	bl	80086be <USBD_LL_Transmit>

  return USBD_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2205      	movs	r2, #5
 8007dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007df0:	2300      	movs	r3, #0
 8007df2:	2200      	movs	r2, #0
 8007df4:	2100      	movs	r1, #0
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fc82 	bl	8008700 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4912      	ldr	r1, [pc, #72]	; (8007e58 <MX_USB_DEVICE_Init+0x50>)
 8007e10:	4812      	ldr	r0, [pc, #72]	; (8007e5c <MX_USB_DEVICE_Init+0x54>)
 8007e12:	f7fe fe8f 	bl	8006b34 <USBD_Init>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e1c:	f7f8 fdde 	bl	80009dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e20:	490f      	ldr	r1, [pc, #60]	; (8007e60 <MX_USB_DEVICE_Init+0x58>)
 8007e22:	480e      	ldr	r0, [pc, #56]	; (8007e5c <MX_USB_DEVICE_Init+0x54>)
 8007e24:	f7fe feb6 	bl	8006b94 <USBD_RegisterClass>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e2e:	f7f8 fdd5 	bl	80009dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e32:	490c      	ldr	r1, [pc, #48]	; (8007e64 <MX_USB_DEVICE_Init+0x5c>)
 8007e34:	4809      	ldr	r0, [pc, #36]	; (8007e5c <MX_USB_DEVICE_Init+0x54>)
 8007e36:	f7fe fe07 	bl	8006a48 <USBD_CDC_RegisterInterface>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e40:	f7f8 fdcc 	bl	80009dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <MX_USB_DEVICE_Init+0x54>)
 8007e46:	f7fe fecc 	bl	8006be2 <USBD_Start>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e50:	f7f8 fdc4 	bl	80009dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e54:	bf00      	nop
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	200001c8 	.word	0x200001c8
 8007e5c:	200006ac 	.word	0x200006ac
 8007e60:	200000b0 	.word	0x200000b0
 8007e64:	200001b4 	.word	0x200001b4

08007e68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4905      	ldr	r1, [pc, #20]	; (8007e84 <CDC_Init_FS+0x1c>)
 8007e70:	4805      	ldr	r0, [pc, #20]	; (8007e88 <CDC_Init_FS+0x20>)
 8007e72:	f7fe fdfe 	bl	8006a72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e76:	4905      	ldr	r1, [pc, #20]	; (8007e8c <CDC_Init_FS+0x24>)
 8007e78:	4803      	ldr	r0, [pc, #12]	; (8007e88 <CDC_Init_FS+0x20>)
 8007e7a:	f7fe fe18 	bl	8006aae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	2000117c 	.word	0x2000117c
 8007e88:	200006ac 	.word	0x200006ac
 8007e8c:	2000097c 	.word	0x2000097c

08007e90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
 8007eac:	4613      	mov	r3, r2
 8007eae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b23      	cmp	r3, #35	; 0x23
 8007eb4:	d84a      	bhi.n	8007f4c <CDC_Control_FS+0xac>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <CDC_Control_FS+0x1c>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007f4d 	.word	0x08007f4d
 8007ec0:	08007f4d 	.word	0x08007f4d
 8007ec4:	08007f4d 	.word	0x08007f4d
 8007ec8:	08007f4d 	.word	0x08007f4d
 8007ecc:	08007f4d 	.word	0x08007f4d
 8007ed0:	08007f4d 	.word	0x08007f4d
 8007ed4:	08007f4d 	.word	0x08007f4d
 8007ed8:	08007f4d 	.word	0x08007f4d
 8007edc:	08007f4d 	.word	0x08007f4d
 8007ee0:	08007f4d 	.word	0x08007f4d
 8007ee4:	08007f4d 	.word	0x08007f4d
 8007ee8:	08007f4d 	.word	0x08007f4d
 8007eec:	08007f4d 	.word	0x08007f4d
 8007ef0:	08007f4d 	.word	0x08007f4d
 8007ef4:	08007f4d 	.word	0x08007f4d
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007f4d 	.word	0x08007f4d
 8007f00:	08007f4d 	.word	0x08007f4d
 8007f04:	08007f4d 	.word	0x08007f4d
 8007f08:	08007f4d 	.word	0x08007f4d
 8007f0c:	08007f4d 	.word	0x08007f4d
 8007f10:	08007f4d 	.word	0x08007f4d
 8007f14:	08007f4d 	.word	0x08007f4d
 8007f18:	08007f4d 	.word	0x08007f4d
 8007f1c:	08007f4d 	.word	0x08007f4d
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	08007f4d 	.word	0x08007f4d
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f4d 	.word	0x08007f4d
 8007f30:	08007f4d 	.word	0x08007f4d
 8007f34:	08007f4d 	.word	0x08007f4d
 8007f38:	08007f4d 	.word	0x08007f4d
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007f4d 	.word	0x08007f4d
 8007f44:	08007f4d 	.word	0x08007f4d
 8007f48:	08007f4d 	.word	0x08007f4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f4c:	bf00      	nop
  }

  return (USBD_OK);
 8007f4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4805      	ldr	r0, [pc, #20]	; (8007f80 <CDC_Receive_FS+0x24>)
 8007f6a:	f7fe fda0 	bl	8006aae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f6e:	4804      	ldr	r0, [pc, #16]	; (8007f80 <CDC_Receive_FS+0x24>)
 8007f70:	f7fe fdb6 	bl	8006ae0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	200006ac 	.word	0x200006ac

08007f84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2212      	movs	r2, #18
 8007fb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fba:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	200001e4 	.word	0x200001e4

08007fcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fde:	4b03      	ldr	r3, [pc, #12]	; (8007fec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	200001f8 	.word	0x200001f8

08007ff0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d105      	bne.n	800800e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4907      	ldr	r1, [pc, #28]	; (8008024 <USBD_FS_ProductStrDescriptor+0x34>)
 8008006:	4808      	ldr	r0, [pc, #32]	; (8008028 <USBD_FS_ProductStrDescriptor+0x38>)
 8008008:	f7ff fe1d 	bl	8007c46 <USBD_GetString>
 800800c:	e004      	b.n	8008018 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4904      	ldr	r1, [pc, #16]	; (8008024 <USBD_FS_ProductStrDescriptor+0x34>)
 8008012:	4805      	ldr	r0, [pc, #20]	; (8008028 <USBD_FS_ProductStrDescriptor+0x38>)
 8008014:	f7ff fe17 	bl	8007c46 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	2000197c 	.word	0x2000197c
 8008028:	08008860 	.word	0x08008860

0800802c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	4904      	ldr	r1, [pc, #16]	; (800804c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800803c:	4804      	ldr	r0, [pc, #16]	; (8008050 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800803e:	f7ff fe02 	bl	8007c46 <USBD_GetString>
  return USBD_StrDesc;
 8008042:	4b02      	ldr	r3, [pc, #8]	; (800804c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	2000197c 	.word	0x2000197c
 8008050:	08008870 	.word	0x08008870

08008054 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	221a      	movs	r2, #26
 8008064:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008066:	f000 f843 	bl	80080f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800806a:	4b02      	ldr	r3, [pc, #8]	; (8008074 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200001fc 	.word	0x200001fc

08008078 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	6039      	str	r1, [r7, #0]
 8008082:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	4907      	ldr	r1, [pc, #28]	; (80080ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800808e:	4808      	ldr	r0, [pc, #32]	; (80080b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008090:	f7ff fdd9 	bl	8007c46 <USBD_GetString>
 8008094:	e004      	b.n	80080a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	4904      	ldr	r1, [pc, #16]	; (80080ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800809a:	4805      	ldr	r0, [pc, #20]	; (80080b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800809c:	f7ff fdd3 	bl	8007c46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080a0:	4b02      	ldr	r3, [pc, #8]	; (80080ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	2000197c 	.word	0x2000197c
 80080b0:	0800887c 	.word	0x0800887c

080080b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4907      	ldr	r1, [pc, #28]	; (80080e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080ca:	4808      	ldr	r0, [pc, #32]	; (80080ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080cc:	f7ff fdbb 	bl	8007c46 <USBD_GetString>
 80080d0:	e004      	b.n	80080dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	4904      	ldr	r1, [pc, #16]	; (80080e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080d6:	4805      	ldr	r0, [pc, #20]	; (80080ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080d8:	f7ff fdb5 	bl	8007c46 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080dc:	4b02      	ldr	r3, [pc, #8]	; (80080e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	2000197c 	.word	0x2000197c
 80080ec:	08008888 	.word	0x08008888

080080f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080f6:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <Get_SerialNum+0x44>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080fc:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <Get_SerialNum+0x48>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008102:	4b0e      	ldr	r3, [pc, #56]	; (800813c <Get_SerialNum+0x4c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008116:	2208      	movs	r2, #8
 8008118:	4909      	ldr	r1, [pc, #36]	; (8008140 <Get_SerialNum+0x50>)
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f814 	bl	8008148 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008120:	2204      	movs	r2, #4
 8008122:	4908      	ldr	r1, [pc, #32]	; (8008144 <Get_SerialNum+0x54>)
 8008124:	68b8      	ldr	r0, [r7, #8]
 8008126:	f000 f80f 	bl	8008148 <IntToUnicode>
  }
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	1fff7a10 	.word	0x1fff7a10
 8008138:	1fff7a14 	.word	0x1fff7a14
 800813c:	1fff7a18 	.word	0x1fff7a18
 8008140:	200001fe 	.word	0x200001fe
 8008144:	2000020e 	.word	0x2000020e

08008148 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	4613      	mov	r3, r2
 8008154:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800815a:	2300      	movs	r3, #0
 800815c:	75fb      	strb	r3, [r7, #23]
 800815e:	e027      	b.n	80081b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	0f1b      	lsrs	r3, r3, #28
 8008164:	2b09      	cmp	r3, #9
 8008166:	d80b      	bhi.n	8008180 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	0f1b      	lsrs	r3, r3, #28
 800816c:	b2da      	uxtb	r2, r3
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4619      	mov	r1, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	440b      	add	r3, r1
 8008178:	3230      	adds	r2, #48	; 0x30
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e00a      	b.n	8008196 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	0f1b      	lsrs	r3, r3, #28
 8008184:	b2da      	uxtb	r2, r3
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	4619      	mov	r1, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	440b      	add	r3, r1
 8008190:	3237      	adds	r2, #55	; 0x37
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	3301      	adds	r3, #1
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	4413      	add	r3, r2
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	3301      	adds	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
 80081b0:	7dfa      	ldrb	r2, [r7, #23]
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d3d3      	bcc.n	8008160 <IntToUnicode+0x18>
  }
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d0:	f107 0314 	add.w	r3, r7, #20
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	605a      	str	r2, [r3, #4]
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	60da      	str	r2, [r3, #12]
 80081de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081e8:	d13a      	bne.n	8008260 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ea:	2300      	movs	r3, #0
 80081ec:	613b      	str	r3, [r7, #16]
 80081ee:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <HAL_PCD_MspInit+0xa0>)
 80081f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f2:	4a1d      	ldr	r2, [pc, #116]	; (8008268 <HAL_PCD_MspInit+0xa0>)
 80081f4:	f043 0301 	orr.w	r3, r3, #1
 80081f8:	6313      	str	r3, [r2, #48]	; 0x30
 80081fa:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <HAL_PCD_MspInit+0xa0>)
 80081fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008206:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800820a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800820c:	2302      	movs	r3, #2
 800820e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008214:	2303      	movs	r3, #3
 8008216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008218:	230a      	movs	r3, #10
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	4619      	mov	r1, r3
 8008222:	4812      	ldr	r0, [pc, #72]	; (800826c <HAL_PCD_MspInit+0xa4>)
 8008224:	f7f9 f9e6 	bl	80015f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <HAL_PCD_MspInit+0xa0>)
 800822a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822c:	4a0e      	ldr	r2, [pc, #56]	; (8008268 <HAL_PCD_MspInit+0xa0>)
 800822e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008232:	6353      	str	r3, [r2, #52]	; 0x34
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	4b0b      	ldr	r3, [pc, #44]	; (8008268 <HAL_PCD_MspInit+0xa0>)
 800823a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823c:	4a0a      	ldr	r2, [pc, #40]	; (8008268 <HAL_PCD_MspInit+0xa0>)
 800823e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008242:	6453      	str	r3, [r2, #68]	; 0x44
 8008244:	4b08      	ldr	r3, [pc, #32]	; (8008268 <HAL_PCD_MspInit+0xa0>)
 8008246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008250:	2200      	movs	r2, #0
 8008252:	2100      	movs	r1, #0
 8008254:	2043      	movs	r0, #67	; 0x43
 8008256:	f7f9 f904 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800825a:	2043      	movs	r0, #67	; 0x43
 800825c:	f7f9 f91d 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008260:	bf00      	nop
 8008262:	3728      	adds	r7, #40	; 0x28
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	40023800 	.word	0x40023800
 800826c:	40020000 	.word	0x40020000

08008270 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f7fe fcf6 	bl	8006c78 <USBD_LL_SetupStage>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	4613      	mov	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	440b      	add	r3, r1
 80082b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	4619      	mov	r1, r3
 80082be:	f7fe fd30 	bl	8006d22 <USBD_LL_DataOutStage>
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80082dc:	78fa      	ldrb	r2, [r7, #3]
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	4613      	mov	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	3348      	adds	r3, #72	; 0x48
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	4619      	mov	r1, r3
 80082f2:	f7fe fd79 	bl	8006de8 <USBD_LL_DataInStage>
}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fe8d 	bl	800702c <USBD_LL_SOF>
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008322:	2301      	movs	r3, #1
 8008324:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
 8008332:	e008      	b.n	8008346 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d102      	bne.n	8008342 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
 8008340:	e001      	b.n	8008346 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008342:	f7f8 fb4b 	bl	80009dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800834c:	7bfa      	ldrb	r2, [r7, #15]
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe fe2d 	bl	8006fb0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe fdd9 	bl	8006f14 <USBD_LL_Reset>
}
 8008362:	bf00      	nop
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe fe28 	bl	8006fd0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6812      	ldr	r2, [r2, #0]
 800838e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <HAL_PCD_SuspendCallback+0x48>)
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	4a03      	ldr	r2, [pc, #12]	; (80083b4 <HAL_PCD_SuspendCallback+0x48>)
 80083a6:	f043 0306 	orr.w	r3, r3, #6
 80083aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	e000ed00 	.word	0xe000ed00

080083b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe fe18 	bl	8006ffc <USBD_LL_Resume>
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	4611      	mov	r1, r2
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fe66 	bl	80070bc <USBD_LL_IsoOUTIncomplete>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fe2e 	bl	8007070 <USBD_LL_IsoINIncomplete>
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fe6c 	bl	8007108 <USBD_LL_DevConnected>
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fe69 	bl	800711e <USBD_LL_DevDisconnected>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d13c      	bne.n	80084de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008464:	4a20      	ldr	r2, [pc, #128]	; (80084e8 <USBD_LL_Init+0x94>)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a1e      	ldr	r2, [pc, #120]	; (80084e8 <USBD_LL_Init+0x94>)
 8008470:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008474:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <USBD_LL_Init+0x94>)
 8008476:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800847a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800847c:	4b1a      	ldr	r3, [pc, #104]	; (80084e8 <USBD_LL_Init+0x94>)
 800847e:	2204      	movs	r2, #4
 8008480:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008482:	4b19      	ldr	r3, [pc, #100]	; (80084e8 <USBD_LL_Init+0x94>)
 8008484:	2202      	movs	r2, #2
 8008486:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008488:	4b17      	ldr	r3, [pc, #92]	; (80084e8 <USBD_LL_Init+0x94>)
 800848a:	2200      	movs	r2, #0
 800848c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800848e:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <USBD_LL_Init+0x94>)
 8008490:	2202      	movs	r2, #2
 8008492:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008494:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <USBD_LL_Init+0x94>)
 8008496:	2200      	movs	r2, #0
 8008498:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800849a:	4b13      	ldr	r3, [pc, #76]	; (80084e8 <USBD_LL_Init+0x94>)
 800849c:	2200      	movs	r2, #0
 800849e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80084a0:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <USBD_LL_Init+0x94>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <USBD_LL_Init+0x94>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80084ac:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <USBD_LL_Init+0x94>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80084b2:	480d      	ldr	r0, [pc, #52]	; (80084e8 <USBD_LL_Init+0x94>)
 80084b4:	f7f9 fb98 	bl	8001be8 <HAL_PCD_Init>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80084be:	f7f8 fa8d 	bl	80009dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80084c2:	2180      	movs	r1, #128	; 0x80
 80084c4:	4808      	ldr	r0, [pc, #32]	; (80084e8 <USBD_LL_Init+0x94>)
 80084c6:	f7fa fcf6 	bl	8002eb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80084ca:	2240      	movs	r2, #64	; 0x40
 80084cc:	2100      	movs	r1, #0
 80084ce:	4806      	ldr	r0, [pc, #24]	; (80084e8 <USBD_LL_Init+0x94>)
 80084d0:	f7fa fcaa 	bl	8002e28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80084d4:	2280      	movs	r2, #128	; 0x80
 80084d6:	2101      	movs	r1, #1
 80084d8:	4803      	ldr	r0, [pc, #12]	; (80084e8 <USBD_LL_Init+0x94>)
 80084da:	f7fa fca5 	bl	8002e28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20001b7c 	.word	0x20001b7c

080084ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008502:	4618      	mov	r0, r3
 8008504:	f7f9 fc8d 	bl	8001e22 <HAL_PCD_Start>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f942 	bl	8008798 <USBD_Get_USB_Status>
 8008514:	4603      	mov	r3, r0
 8008516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008518:	7bbb      	ldrb	r3, [r7, #14]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	4608      	mov	r0, r1
 800852c:	4611      	mov	r1, r2
 800852e:	461a      	mov	r2, r3
 8008530:	4603      	mov	r3, r0
 8008532:	70fb      	strb	r3, [r7, #3]
 8008534:	460b      	mov	r3, r1
 8008536:	70bb      	strb	r3, [r7, #2]
 8008538:	4613      	mov	r3, r2
 800853a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800854a:	78bb      	ldrb	r3, [r7, #2]
 800854c:	883a      	ldrh	r2, [r7, #0]
 800854e:	78f9      	ldrb	r1, [r7, #3]
 8008550:	f7fa f871 	bl	8002636 <HAL_PCD_EP_Open>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f91c 	bl	8008798 <USBD_Get_USB_Status>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008588:	78fa      	ldrb	r2, [r7, #3]
 800858a:	4611      	mov	r1, r2
 800858c:	4618      	mov	r0, r3
 800858e:	f7fa f8ba 	bl	8002706 <HAL_PCD_EP_Close>
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	4618      	mov	r0, r3
 800859a:	f000 f8fd 	bl	8008798 <USBD_Get_USB_Status>
 800859e:	4603      	mov	r3, r0
 80085a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fa f992 	bl	80028f4 <HAL_PCD_EP_SetStall>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f8de 	bl	8008798 <USBD_Get_USB_Status>
 80085dc:	4603      	mov	r3, r0
 80085de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f7fa f9d7 	bl	80029bc <HAL_PCD_EP_ClrStall>
 800860e:	4603      	mov	r3, r0
 8008610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f8bf 	bl	8008798 <USBD_Get_USB_Status>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800863a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800863c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008640:	2b00      	cmp	r3, #0
 8008642:	da0b      	bge.n	800865c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	4613      	mov	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	333e      	adds	r3, #62	; 0x3e
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	e00b      	b.n	8008674 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008662:	68f9      	ldr	r1, [r7, #12]
 8008664:	4613      	mov	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008672:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f7f9 ffa4 	bl	80025ec <HAL_PCD_SetAddress>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f874 	bl	8008798 <USBD_Get_USB_Status>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
 80086ca:	460b      	mov	r3, r1
 80086cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086dc:	7af9      	ldrb	r1, [r7, #11]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	f7fa f8bd 	bl	8002860 <HAL_PCD_EP_Transmit>
 80086e6:	4603      	mov	r3, r0
 80086e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 f853 	bl	8008798 <USBD_Get_USB_Status>
 80086f2:	4603      	mov	r3, r0
 80086f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	607a      	str	r2, [r7, #4]
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	460b      	mov	r3, r1
 800870e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800871e:	7af9      	ldrb	r1, [r7, #11]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	f7fa f839 	bl	800279a <HAL_PCD_EP_Receive>
 8008728:	4603      	mov	r3, r0
 800872a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f832 	bl	8008798 <USBD_Get_USB_Status>
 8008734:	4603      	mov	r3, r0
 8008736:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008738:	7dbb      	ldrb	r3, [r7, #22]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008754:	78fa      	ldrb	r2, [r7, #3]
 8008756:	4611      	mov	r1, r2
 8008758:	4618      	mov	r0, r3
 800875a:	f7fa f869 	bl	8002830 <HAL_PCD_EP_GetRxCount>
 800875e:	4603      	mov	r3, r0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008770:	4b03      	ldr	r3, [pc, #12]	; (8008780 <USBD_static_malloc+0x18>)
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	200002cc 	.word	0x200002cc

08008784 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]

}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d817      	bhi.n	80087dc <USBD_Get_USB_Status+0x44>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <USBD_Get_USB_Status+0x1c>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087cb 	.word	0x080087cb
 80087bc:	080087d1 	.word	0x080087d1
 80087c0:	080087d7 	.word	0x080087d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
    break;
 80087c8:	e00b      	b.n	80087e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087ca:	2303      	movs	r3, #3
 80087cc:	73fb      	strb	r3, [r7, #15]
    break;
 80087ce:	e008      	b.n	80087e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
    break;
 80087d4:	e005      	b.n	80087e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087d6:	2303      	movs	r3, #3
 80087d8:	73fb      	strb	r3, [r7, #15]
    break;
 80087da:	e002      	b.n	80087e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087dc:	2303      	movs	r3, #3
 80087de:	73fb      	strb	r3, [r7, #15]
    break;
 80087e0:	bf00      	nop
  }
  return usb_status;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <__libc_init_array>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	4d0d      	ldr	r5, [pc, #52]	; (8008828 <__libc_init_array+0x38>)
 80087f4:	4c0d      	ldr	r4, [pc, #52]	; (800882c <__libc_init_array+0x3c>)
 80087f6:	1b64      	subs	r4, r4, r5
 80087f8:	10a4      	asrs	r4, r4, #2
 80087fa:	2600      	movs	r6, #0
 80087fc:	42a6      	cmp	r6, r4
 80087fe:	d109      	bne.n	8008814 <__libc_init_array+0x24>
 8008800:	4d0b      	ldr	r5, [pc, #44]	; (8008830 <__libc_init_array+0x40>)
 8008802:	4c0c      	ldr	r4, [pc, #48]	; (8008834 <__libc_init_array+0x44>)
 8008804:	f000 f820 	bl	8008848 <_init>
 8008808:	1b64      	subs	r4, r4, r5
 800880a:	10a4      	asrs	r4, r4, #2
 800880c:	2600      	movs	r6, #0
 800880e:	42a6      	cmp	r6, r4
 8008810:	d105      	bne.n	800881e <__libc_init_array+0x2e>
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	f855 3b04 	ldr.w	r3, [r5], #4
 8008818:	4798      	blx	r3
 800881a:	3601      	adds	r6, #1
 800881c:	e7ee      	b.n	80087fc <__libc_init_array+0xc>
 800881e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008822:	4798      	blx	r3
 8008824:	3601      	adds	r6, #1
 8008826:	e7f2      	b.n	800880e <__libc_init_array+0x1e>
 8008828:	080088b8 	.word	0x080088b8
 800882c:	080088b8 	.word	0x080088b8
 8008830:	080088b8 	.word	0x080088b8
 8008834:	080088bc 	.word	0x080088bc

08008838 <memset>:
 8008838:	4402      	add	r2, r0
 800883a:	4603      	mov	r3, r0
 800883c:	4293      	cmp	r3, r2
 800883e:	d100      	bne.n	8008842 <memset+0xa>
 8008840:	4770      	bx	lr
 8008842:	f803 1b01 	strb.w	r1, [r3], #1
 8008846:	e7f9      	b.n	800883c <memset+0x4>

08008848 <_init>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	bf00      	nop
 800884c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884e:	bc08      	pop	{r3}
 8008850:	469e      	mov	lr, r3
 8008852:	4770      	bx	lr

08008854 <_fini>:
 8008854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008856:	bf00      	nop
 8008858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885a:	bc08      	pop	{r3}
 800885c:	469e      	mov	lr, r3
 800885e:	4770      	bx	lr
